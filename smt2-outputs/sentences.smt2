(declare-sort Individual 0)
(declare-sort Event 0)
(declare-sort Name 0)
(declare-sort Pred 0)

(declare-const id_Agatha Name)
(declare-const id_Aunt Name)
(declare-const id_Charles Name)
(declare-const id_Dreadbury Name)
(declare-const id_Mansion Name)

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(assert (and (distinct id_Dreadbury id_Mansion) (distinct id_Charles id_Mansion) (distinct id_Charles id_Dreadbury) (distinct id_Aunt id_Mansion) (distinct id_Aunt id_Dreadbury) (distinct id_Aunt id_Charles) (distinct id_Agatha id_Mansion) (distinct id_Agatha id_Dreadbury) (distinct id_Agatha id_Charles) (distinct id_Agatha id_Aunt)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s0_e8 Event)
(declare-const s0_e9 Event)
(declare-const s0_e15 Event)
(declare-const s0_e2 Event)
(declare-const s0_e28 Event)

(declare-fun s0_h33 (Entity) Bool)
(declare-fun s0_root (Entity Entity Entity Entity Entity) Bool)
(declare-fun s0_h27 (Entity Entity) Bool)
(declare-fun s0_h24 (Entity Entity Entity Entity) Bool)
(declare-fun s0_h20 (Entity) Bool)
(declare-fun s0_h17 (Entity Entity) Bool)
(declare-fun s0_h14 (Entity Entity) Bool)
(declare-fun s0_h11 (Entity Entity Entity Entity Entity) Bool)
(declare-fun s0_h5 (Entity Entity Entity) Bool)
(declare-fun s0_h4 (Entity Entity) Bool)
(declare-fun s0_h1 (Entity Entity) Bool)

(assert (forall ((S0_X29 Entity)) (= (s0_h33 (S0_X29 Entity)) (named S0_X29 ""Aunt""))))
(assert (forall ((S0_X29 Entity) (S0_X23 Entity) (S0_X16 Entity) (S0_X10 Entity) (S0_X3 Entity)) (= (s0_root (S0_X29 Entity) (S0_X23 Entity) (S0_X16 Entity) (S0_X10 Entity) (S0_X3 Entity)) (proper_q S0_X29 s0_h33 (apply s0_h11 S0_X23 S0_X16 S0_X10 S0_X3)))))
(assert (forall ((S0_X29 Entity) (S0_X23 Entity)) (= (s0_h27 (S0_X29 Entity) (S0_X23 Entity)) (named S0_X23 ""Agatha"") (compound s0_e28 S0_X23 S0_X29))))
(assert (forall ((S0_X29 Entity) (S0_X23 Entity) (S0_X3 Entity) (S0_X10 Entity)) (= (s0_h24 (S0_X29 Entity) (S0_X23 Entity) (S0_X3 Entity) (S0_X10 Entity)) (proper_q S0_X23 (apply s0_h27 S0_X29) (apply s0_h5 S0_X10 S0_X3)))))
(assert (forall ((S0_X16 Entity)) (= (s0_h20 (S0_X16 Entity)) (named S0_X16 ""Dreadbury""))))
(assert (forall ((S0_X16 Entity) (S0_X10 Entity)) (= (s0_h17 (S0_X16 Entity) (S0_X10 Entity)) (proper_q S0_X16 s0_h20 (apply s0_h14 S0_X10)))))
(assert (forall ((S0_X10 Entity) (S0_X16 Entity)) (= (s0_h14 (S0_X10 Entity) (S0_X16 Entity)) (named S0_X10 ""Mansion"") (compound s0_e15 S0_X10 S0_X16))))
(assert (forall ((S0_X23 Entity) (S0_X16 Entity) (S0_X10 Entity) (S0_X3 Entity) (S0_X29 Entity)) (= (s0_h11 (S0_X23 Entity) (S0_X16 Entity) (S0_X10 Entity) (S0_X3 Entity) (S0_X29 Entity)) (proper_q S0_X10 (apply s0_h17 S0_X16) (apply s0_h24 S0_X29 S0_X23 S0_X3)))))
(assert (forall ((S0_X10 Entity) (S0_X3 Entity) (S0_X23 Entity)) (= (s0_h5 (S0_X10 Entity) (S0_X3 Entity) (S0_X23 Entity)) (some_q S0_X3 (apply s0_h4 S0_X10) (apply s0_h1 S0_X23)))))
(assert (forall ((S0_X10 Entity) (S0_X3 Entity)) (= (s0_h4 (S0_X10 Entity) (S0_X3 Entity)) (in_p_loc s0_e9 s0_e8 S0_X10) (live_v_1 s0_e8 S0_X3) (person S0_X3))))
(assert (forall ((S0_X23 Entity) (S0_X3 Entity)) (= (s0_h1 (S0_X23 Entity) (S0_X3 Entity)) (kill_v_1 s0_e2 S0_X3 S0_X23))))

(assert (exists ((S0_X29 Entity)) (s0_h33 S0_X29)))
(assert (exists ((S0_X29 Entity) (s0_h33 Handle) (s0_h11 Handle)) (s0_root S0_X29 s0_h33 s0_h11)))
(assert (exists ((S0_X23 Entity)) (s0_h27 S0_X23)))
(assert (exists ((S0_X23 Entity) (s0_h27 Handle) (s0_h5 Handle)) (s0_h24 S0_X23 s0_h27 s0_h5)))
(assert (exists ((S0_X16 Entity)) (s0_h20 S0_X16)))
(assert (exists ((S0_X16 Entity) (s0_h20 Handle) (s0_h14 Handle)) (s0_h17 S0_X16 s0_h20 s0_h14)))
(assert (exists ((S0_X10 Entity)) (s0_h14 S0_X10)))
(assert (exists ((S0_X10 Entity) (s0_h17 Handle) (s0_h24 Handle)) (s0_h11 S0_X10 s0_h17 s0_h24)))
(assert (exists ((S0_X3 Entity) (s0_h4 Handle) (s0_h1 Handle)) (s0_h5 S0_X3 s0_h4 s0_h1)))
(assert (exists ((s0_e9 Event) (s0_e8 Event) (S0_X10 Entity)) (s0_h4 s0_e9 s0_e8 S0_X10)))
(assert (exists ((s0_e2 Event) (S0_X3 Entity) (S0_X23 Entity)) (s0_h1 s0_e2 S0_X3 S0_X23)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s1_e30 Event)
(declare-const s1_e31 Event)
(declare-const s1_e37 Event)
(declare-const s1_e45 Event)
(declare-const s1_e2 Event)
(declare-const s1_e51 Event)
(declare-const s1_e53 Event)
(declare-const s1_e54 Event)

(declare-fun s1_h50 (Entity) Bool)
(declare-fun s1_h47 (Entity Entity Entity Entity Entity) Bool)
(declare-fun s1_h42 (Entity) Bool)
(declare-fun s1_h39 (Entity Entity) Bool)
(declare-fun s1_h36 (Entity Entity) Bool)
(declare-fun s1_root (Entity Entity Entity Entity Entity Entity Entity Entity) Bool)
(declare-fun s1_h28 (Entity) Bool)
(declare-fun s1_h25 (Entity Entity Entity) Bool)
(declare-fun s1_h23 (Entity Entity Entity) Bool)
(declare-fun s1_h22 (Entity) Bool)
(declare-fun s1_h18 (Entity Entity Entity) Bool)
(declare-fun s1_h17 (Entity Entity Entity) Bool)
(declare-fun s1_h13 (Entity Entity Entity Entity Entity Entity Entity) Bool)
(declare-fun s1_h11 (Entity) Bool)
(declare-fun s1_h7 (Entity Entity Entity) Bool)
(declare-fun s1_h4 (Entity Entity Entity Entity Entity) Bool)
(declare-fun s1_h1 (Entity Entity Entity) Bool)

(assert (forall ((S1_X46 Entity)) (= (s1_h50 (S1_X46 Entity)) (therein_p_dir s1_e54 s1_e53) (live_v_1 s1_e53 S1_X46) (people_n_of S1_X46) (only_a_1 s1_e51 S1_X46))))
(assert (forall ((S1_X46 Entity) (S1_X32 Entity) (S1_X8 Entity) (S1_X3 Entity) (S1_X14 Entity)) (= (s1_h47 (S1_X46 Entity) (S1_X32 Entity) (S1_X8 Entity) (S1_X3 Entity) (S1_X14 Entity)) (the_q S1_X46 s1_h50 (apply s1_h4 S1_X32 S1_X14 S1_X8 S1_X3)))))
(assert (forall ((S1_X38 Entity)) (= (s1_h42 (S1_X38 Entity)) (named S1_X38 ""Dreadbury""))))
(assert (forall ((S1_X38 Entity) (S1_X32 Entity)) (= (s1_h39 (S1_X38 Entity) (S1_X32 Entity)) (proper_q S1_X38 s1_h42 (apply s1_h36 S1_X32)))))
(assert (forall ((S1_X32 Entity) (S1_X38 Entity)) (= (s1_h36 (S1_X32 Entity) (S1_X38 Entity)) (named S1_X32 ""Mansion"") (compound s1_e37 S1_X32 S1_X38))))
(assert (forall ((S1_X46 Entity) (S1_X38 Entity) (S1_X32 Entity) (S1_X24 Entity) (S1_X19 Entity) (S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity)) (= (s1_root (S1_X46 Entity) (S1_X38 Entity) (S1_X32 Entity) (S1_X24 Entity) (S1_X19 Entity) (S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity)) (proper_q S1_X32 (apply s1_h39 S1_X38) (apply s1_h13 S1_X46 S1_X24 S1_X19 S1_X14 S1_X8 S1_X3)))))
(assert (forall ((S1_X24 Entity)) (= (s1_h28 (S1_X24 Entity)) (named S1_X24 ""Charles""))))
(assert (forall ((S1_X24 Entity) (S1_X19 Entity) (S1_X14 Entity)) (= (s1_h25 (S1_X24 Entity) (S1_X19 Entity) (S1_X14 Entity)) (proper_q S1_X24 s1_h28 (apply s1_h18 S1_X19 S1_X14)))))
(assert (forall ((S1_X24 Entity) (S1_X14 Entity) (S1_X19 Entity)) (= (s1_h23 (S1_X24 Entity) (S1_X14 Entity) (S1_X19 Entity)) (and_c_x S1_X14 S1_X19 S1_X24))))
(assert (forall ((S1_X19 Entity)) (= (s1_h22 (S1_X19 Entity)) (butler_n_1 S1_X19))))
(assert (forall ((S1_X19 Entity) (S1_X14 Entity) (S1_X24 Entity)) (= (s1_h18 (S1_X19 Entity) (S1_X14 Entity) (S1_X24 Entity)) (the_q S1_X19 s1_h22 (apply s1_h23 S1_X24 S1_X14)))))
(assert (forall ((S1_X14 Entity) (S1_X3 Entity) (S1_X8 Entity)) (= (s1_h17 (S1_X14 Entity) (S1_X3 Entity) (S1_X8 Entity)) (implicit_conj S1_X3 S1_X8 S1_X14))))
(assert (forall ((S1_X46 Entity) (S1_X24 Entity) (S1_X19 Entity) (S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity) (S1_X32 Entity)) (= (s1_h13 (S1_X46 Entity) (S1_X24 Entity) (S1_X19 Entity) (S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity) (S1_X32 Entity)) (udef_q S1_X14 (apply s1_h25 S1_X24 S1_X19) (apply s1_h47 S1_X46 S1_X32 S1_X8 S1_X3)))))
(assert (forall ((S1_X8 Entity)) (= (s1_h11 (S1_X8 Entity)) (named S1_X8 ""Agatha""))))
(assert (forall ((S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity)) (= (s1_h7 (S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity)) (proper_q S1_X8 s1_h11 (apply s1_h17 S1_X14 S1_X3)))))
(assert (forall ((S1_X32 Entity) (S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity) (S1_X46 Entity)) (= (s1_h4 (S1_X32 Entity) (S1_X14 Entity) (S1_X8 Entity) (S1_X3 Entity) (S1_X46 Entity)) (udef_q S1_X3 (apply s1_h7 S1_X14 S1_X8) (apply s1_h1 S1_X46 S1_X32)))))
(assert (forall ((S1_X46 Entity) (S1_X32 Entity) (S1_X3 Entity)) (= (s1_h1 (S1_X46 Entity) (S1_X32 Entity) (S1_X3 Entity)) (be_v_id s1_e45 S1_X3 S1_X46) (and_c_e s1_e2 s1_e30 s1_e45) (in_p_loc s1_e31 s1_e30 S1_X32) (live_v_1 s1_e30 S1_X3))))

(assert (exists ((s1_e54 Event) (s1_e53 Event)) (s1_h50 s1_e54 s1_e53)))
(assert (exists ((S1_X46 Entity) (s1_h50 Handle) (s1_h4 Handle)) (s1_h47 S1_X46 s1_h50 s1_h4)))
(assert (exists ((S1_X38 Entity)) (s1_h42 S1_X38)))
(assert (exists ((S1_X38 Entity) (s1_h42 Handle) (s1_h36 Handle)) (s1_h39 S1_X38 s1_h42 s1_h36)))
(assert (exists ((S1_X32 Entity)) (s1_h36 S1_X32)))
(assert (exists ((S1_X32 Entity) (s1_h39 Handle) (s1_h13 Handle)) (s1_root S1_X32 s1_h39 s1_h13)))
(assert (exists ((S1_X24 Entity)) (s1_h28 S1_X24)))
(assert (exists ((S1_X24 Entity) (s1_h28 Handle) (s1_h18 Handle)) (s1_h25 S1_X24 s1_h28 s1_h18)))
(assert (exists ((S1_X14 Entity) (S1_X19 Entity) (S1_X24 Entity)) (s1_h23 S1_X14 S1_X19 S1_X24)))
(assert (exists ((S1_X19 Entity)) (s1_h22 S1_X19)))
(assert (exists ((S1_X19 Entity) (s1_h22 Handle) (s1_h23 Handle)) (s1_h18 S1_X19 s1_h22 s1_h23)))
(assert (exists ((S1_X3 Entity) (S1_X8 Entity) (S1_X14 Entity)) (s1_h17 S1_X3 S1_X8 S1_X14)))
(assert (exists ((S1_X14 Entity) (s1_h25 Handle) (s1_h47 Handle)) (s1_h13 S1_X14 s1_h25 s1_h47)))
(assert (exists ((S1_X8 Entity)) (s1_h11 S1_X8)))
(assert (exists ((S1_X8 Entity) (s1_h11 Handle) (s1_h17 Handle)) (s1_h7 S1_X8 s1_h11 s1_h17)))
(assert (exists ((S1_X3 Entity) (s1_h7 Handle) (s1_h1 Handle)) (s1_h4 S1_X3 s1_h7 s1_h1)))
(assert (exists ((s1_e45 Event) (S1_X3 Entity) (S1_X46 Entity)) (s1_h1 s1_e45 S1_X3 S1_X46)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s2_e9 Event)
(declare-const s2_e15 Event)
(declare-const s2_e22 Event)
(declare-const s2_e2 Event)
(declare-const s2_e27 Event)
(declare-const s2_e33 Event)

(declare-fun s2_h38 (Entity) Bool)
(declare-fun s2_h35 (Entity Entity Entity Entity) Bool)
(declare-fun s2_h32 (Entity Entity) Bool)
(declare-fun s2_h29 (Entity Entity Entity) Bool)
(declare-fun s2_h25 (Entity Entity) Bool)
(declare-fun s2_h20 (Entity) Bool)
(declare-fun s2_h17 (Entity Entity) Bool)
(declare-fun s2_h14 (Entity Entity) Bool)
(declare-fun s2_root (Entity Entity Entity Entity Entity) Bool)
(declare-fun s2_h7 (Entity) Bool)
(declare-fun s2_h4 (Entity Entity Entity Entity) Bool)
(declare-fun s2_h1 (Entity Entity Entity Entity) Bool)

(assert (forall ((S2_X34 Entity)) (= (s2_h38 (S2_X34 Entity)) (pron S2_X34))))
(assert (forall ((S2_X34 Entity) (S2_X28 Entity) (S2_X3 Entity) (S2_X10 Entity)) (= (s2_h35 (S2_X34 Entity) (S2_X28 Entity) (S2_X3 Entity) (S2_X10 Entity)) (pronoun_q S2_X34 s2_h38 (apply s2_h4 S2_X28 S2_X10 S2_X3)))))
(assert (forall ((S2_X34 Entity) (S2_X28 Entity)) (= (s2_h32 (S2_X34 Entity) (S2_X28 Entity)) (victim_n_of S2_X28) (poss s2_e33 S2_X28 S2_X34))))
(assert (forall ((S2_X34 Entity) (S2_X28 Entity) (S2_X3 Entity)) (= (s2_h29 (S2_X34 Entity) (S2_X28 Entity) (S2_X3 Entity)) (def_explicit_q S2_X28 (apply s2_h32 S2_X34) (apply s2_h25 S2_X3)))))
(assert (forall ((S2_X3 Entity) (S2_X28 Entity)) (= (s2_h25 (S2_X3 Entity) (S2_X28 Entity)) (more_comp s2_e27 s2_e22 S2_X28) (rich_a_in s2_e22 S2_X3))))
(assert (forall ((S2_X16 Entity)) (= (s2_h20 (S2_X16 Entity)) (pron S2_X16))))
(assert (forall ((S2_X16 Entity) (S2_X10 Entity)) (= (s2_h17 (S2_X16 Entity) (S2_X10 Entity)) (pronoun_q S2_X16 s2_h20 (apply s2_h14 S2_X10)))))
(assert (forall ((S2_X10 Entity) (S2_X16 Entity)) (= (s2_h14 (S2_X10 Entity) (S2_X16 Entity)) (victim_n_of S2_X10) (poss s2_e15 S2_X10 S2_X16))))
(assert (forall ((S2_X34 Entity) (S2_X28 Entity) (S2_X16 Entity) (S2_X10 Entity) (S2_X3 Entity)) (= (s2_root (S2_X34 Entity) (S2_X28 Entity) (S2_X16 Entity) (S2_X10 Entity) (S2_X3 Entity)) (def_explicit_q S2_X10 (apply s2_h17 S2_X16) (apply s2_h35 S2_X34 S2_X28 S2_X3)))))
(assert (forall ((S2_X3 Entity)) (= (s2_h7 (S2_X3 Entity)) (killer_n_1 S2_X3))))
(assert (forall ((S2_X28 Entity) (S2_X10 Entity) (S2_X3 Entity) (S2_X34 Entity)) (= (s2_h4 (S2_X28 Entity) (S2_X10 Entity) (S2_X3 Entity) (S2_X34 Entity)) (a_q S2_X3 s2_h7 (apply s2_h1 S2_X34 S2_X28 S2_X10)))))
(assert (forall ((S2_X34 Entity) (S2_X28 Entity) (S2_X10 Entity) (S2_X3 Entity)) (= (s2_h1 (S2_X34 Entity) (S2_X28 Entity) (S2_X10 Entity) (S2_X3 Entity)) (never_a_1 (apply s2_h29 S2_X34 S2_X28 S2_X3)) (and_c_e s2_e2 s2_e9 s2_e22) (hate_v_1 s2_e9 S2_X3 S2_X10) (always_a_1 s2_e9))))

(assert (exists ((S2_X34 Entity)) (s2_h38 S2_X34)))
(assert (exists ((S2_X34 Entity) (s2_h38 Handle) (s2_h4 Handle)) (s2_h35 S2_X34 s2_h38 s2_h4)))
(assert (exists ((S2_X28 Entity)) (s2_h32 S2_X28)))
(assert (exists ((S2_X28 Entity) (s2_h32 Handle) (s2_h25 Handle)) (s2_h29 S2_X28 s2_h32 s2_h25)))
(assert (exists ((s2_e27 Event) (s2_e22 Event) (S2_X28 Entity)) (s2_h25 s2_e27 s2_e22 S2_X28)))
(assert (exists ((S2_X16 Entity)) (s2_h20 S2_X16)))
(assert (exists ((S2_X16 Entity) (s2_h20 Handle) (s2_h14 Handle)) (s2_h17 S2_X16 s2_h20 s2_h14)))
(assert (exists ((S2_X10 Entity)) (s2_h14 S2_X10)))
(assert (exists ((S2_X10 Entity) (s2_h17 Handle) (s2_h35 Handle)) (s2_root S2_X10 s2_h17 s2_h35)))
(assert (exists ((S2_X3 Entity)) (s2_h7 S2_X3)))
(assert (exists ((S2_X3 Entity) (s2_h7 Handle) (s2_h1 Handle)) (s2_h4 S2_X3 s2_h7 s2_h1)))
(assert (exists ((s2_h29 Handle)) (s2_h1 s2_h29)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s3_e2 Event)
(declare-const s3_e19 Event)
(declare-const s3_e27 Event)

(declare-fun s3_h24 (Entity) Bool)
(declare-fun s3_root (Entity Entity Entity Entity) Bool)
(declare-fun s3_h18 (Entity Entity) Bool)
(declare-fun s3_h14 (Entity Entity Entity) Bool)
(declare-fun s3_h11 (Entity Entity Entity Entity) Bool)
(declare-fun s3_h10 (Entity Entity) Bool)
(declare-fun s3_h7 (Entity) Bool)
(declare-fun s3_h4 (Entity Entity) Bool)
(declare-fun s3_h1 (Entity Entity) Bool)

(assert (forall ((S3_X20 Entity)) (= (s3_h24 (S3_X20 Entity)) (aunt_n_of S3_X20))))
(assert (forall ((S3_X20 Entity) (S3_X15 Entity) (S3_X9 Entity) (S3_X3 Entity)) (= (s3_root (S3_X20 Entity) (S3_X15 Entity) (S3_X9 Entity) (S3_X3 Entity)) (udef_q S3_X20 s3_h24 (apply s3_h11 S3_X15 S3_X9 S3_X3)))))
(assert (forall ((S3_X20 Entity) (S3_X15 Entity)) (= (s3_h18 (S3_X20 Entity) (S3_X15 Entity)) (named S3_X15 ""Agatha"") (compound s3_e19 S3_X15 S3_X20))))
(assert (forall ((S3_X20 Entity) (S3_X15 Entity) (S3_X9 Entity)) (= (s3_h14 (S3_X20 Entity) (S3_X15 Entity) (S3_X9 Entity)) (proper_q S3_X15 (apply s3_h18 S3_X20) (apply s3_h10 S3_X9)))))
(assert (forall ((S3_X15 Entity) (S3_X9 Entity) (S3_X3 Entity) (S3_X20 Entity)) (= (s3_h11 (S3_X15 Entity) (S3_X9 Entity) (S3_X3 Entity) (S3_X20 Entity)) (no_q S3_X9 (apply s3_h14 S3_X20 S3_X15) (apply s3_h4 S3_X3)))))
(assert (forall ((S3_X9 Entity) (S3_X15 Entity)) (= (s3_h10 (S3_X9 Entity) (S3_X15 Entity)) (hate_v_1 s3_e27 S3_X15 S3_X9) (person S3_X9))))
(assert (forall ((S3_X3 Entity)) (= (s3_h7 (S3_X3 Entity)) (named S3_X3 ""Charles""))))
(assert (forall ((S3_X3 Entity) (S3_X9 Entity)) (= (s3_h4 (S3_X3 Entity) (S3_X9 Entity)) (proper_q S3_X3 s3_h7 (apply s3_h1 S3_X9)))))
(assert (forall ((S3_X9 Entity) (S3_X3 Entity)) (= (s3_h1 (S3_X9 Entity) (S3_X3 Entity)) (hate_v_1 s3_e2 S3_X3 S3_X9))))

(assert (exists ((S3_X20 Entity)) (s3_h24 S3_X20)))
(assert (exists ((S3_X20 Entity) (s3_h24 Handle) (s3_h11 Handle)) (s3_root S3_X20 s3_h24 s3_h11)))
(assert (exists ((S3_X15 Entity)) (s3_h18 S3_X15)))
(assert (exists ((S3_X15 Entity) (s3_h18 Handle) (s3_h10 Handle)) (s3_h14 S3_X15 s3_h18 s3_h10)))
(assert (exists ((S3_X9 Entity) (s3_h14 Handle) (s3_h4 Handle)) (s3_h11 S3_X9 s3_h14 s3_h4)))
(assert (exists ((s3_e27 Event) (S3_X15 Entity) (S3_X9 Entity)) (s3_h10 s3_e27 S3_X15 S3_X9)))
(assert (exists ((S3_X3 Entity)) (s3_h7 S3_X3)))
(assert (exists ((S3_X3 Entity) (s3_h7 Handle) (s3_h1 Handle)) (s3_h4 S3_X3 s3_h7 s3_h1)))
(assert (exists ((s3_e2 Event) (S3_X3 Entity) (S3_X9 Entity)) (s3_h1 s3_e2 S3_X3 S3_X9)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s4_e2 Event)
(declare-const s4_e14 Event)

(declare-fun s4_h19 (Entity) Bool)
(declare-fun s4_h16 (Entity Entity) Bool)
(declare-fun s4_root (Entity Entity Entity) Bool)
(declare-fun s4_h10 (Entity Entity) Bool)
(declare-fun s4_h7 (Entity) Bool)
(declare-fun s4_h4 (Entity Entity) Bool)
(declare-fun s4_h1 (Entity Entity) Bool)

(assert (forall ((S4_X15 Entity)) (= (s4_h19 (S4_X15 Entity)) (butler_n_1 S4_X15))))
(assert (forall ((S4_X15 Entity) (S4_X9 Entity)) (= (s4_h16 (S4_X15 Entity) (S4_X9 Entity)) (the_q S4_X15 s4_h19 (apply s4_h10 S4_X9)))))
(assert (forall ((S4_X15 Entity) (S4_X9 Entity) (S4_X3 Entity)) (= (s4_root (S4_X15 Entity) (S4_X9 Entity) (S4_X3 Entity)) (every_q S4_X9 (apply s4_h16 S4_X15) (apply s4_h4 S4_X3)))))
(assert (forall ((S4_X9 Entity) (S4_X15 Entity)) (= (s4_h10 (S4_X9 Entity) (S4_X15 Entity)) (except_p s4_e14 S4_X9 S4_X15) (person S4_X9))))
(assert (forall ((S4_X3 Entity)) (= (s4_h7 (S4_X3 Entity)) (named S4_X3 ""Agatha""))))
(assert (forall ((S4_X3 Entity) (S4_X9 Entity)) (= (s4_h4 (S4_X3 Entity) (S4_X9 Entity)) (proper_q S4_X3 s4_h7 (apply s4_h1 S4_X9)))))
(assert (forall ((S4_X9 Entity) (S4_X3 Entity)) (= (s4_h1 (S4_X9 Entity) (S4_X3 Entity)) (hate_v_1 s4_e2 S4_X3 S4_X9))))

(assert (exists ((S4_X15 Entity)) (s4_h19 S4_X15)))
(assert (exists ((S4_X15 Entity) (s4_h19 Handle) (s4_h10 Handle)) (s4_h16 S4_X15 s4_h19 s4_h10)))
(assert (exists ((S4_X9 Entity) (s4_h16 Handle) (s4_h4 Handle)) (s4_root S4_X9 s4_h16 s4_h4)))
(assert (exists ((s4_e14 Event) (S4_X9 Entity) (S4_X15 Entity)) (s4_h10 s4_e14 S4_X9 S4_X15)))
(assert (exists ((S4_X3 Entity)) (s4_h7 S4_X3)))
(assert (exists ((S4_X3 Entity) (s4_h7 Handle) (s4_h1 Handle)) (s4_h4 S4_X3 s4_h7 s4_h1)))
(assert (exists ((s4_e2 Event) (S4_X3 Entity) (S4_X9 Entity)) (s4_h1 s4_e2 S4_X3 S4_X9)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s5_e2 Event)
(declare-const s5_e13 Event)
(declare-const s5_e16 Event)
(declare-const s5_e18 Event)
(declare-const s5_e24 Event)

(declare-fun s5_h29 (Entity) Bool)
(declare-fun s5_h26 (Entity Entity) Bool)
(declare-fun s5_h23 (Entity Entity) Bool)
(declare-fun s5_h20 (Entity Entity Entity) Bool)
(declare-fun s5_h15 (Entity Entity) Bool)
(declare-fun s5_root (Entity Entity Entity Entity) Bool)
(declare-fun s5_h9 (Entity Entity Entity) Bool)
(declare-fun s5_h7 (Entity) Bool)
(declare-fun s5_h4 (Entity Entity) Bool)
(declare-fun s5_h1 (Entity Entity) Bool)

(assert (forall ((S5_X25 Entity)) (= (s5_h29 (S5_X25 Entity)) (named S5_X25 ""Aunt""))))
(assert (forall ((S5_X25 Entity) (S5_X19 Entity)) (= (s5_h26 (S5_X25 Entity) (S5_X19 Entity)) (proper_q S5_X25 s5_h29 (apply s5_h23 S5_X19)))))
(assert (forall ((S5_X19 Entity) (S5_X25 Entity)) (= (s5_h23 (S5_X19 Entity) (S5_X25 Entity)) (named S5_X19 ""Agatha"") (compound s5_e24 S5_X19 S5_X25))))
(assert (forall ((S5_X25 Entity) (S5_X19 Entity) (S5_X8 Entity)) (= (s5_h20 (S5_X25 Entity) (S5_X19 Entity) (S5_X8 Entity)) (proper_q S5_X19 (apply s5_h26 S5_X25) (apply s5_h15 S5_X8)))))
(assert (forall ((S5_X8 Entity) (S5_X19 Entity)) (= (s5_h15 (S5_X8 Entity) (S5_X19 Entity)) (more_comp s5_e18 s5_e16 S5_X19) (rich_a_in s5_e16 S5_X8))))
(assert (forall ((S5_X25 Entity) (S5_X19 Entity) (S5_X8 Entity) (S5_X3 Entity)) (= (s5_root (S5_X25 Entity) (S5_X19 Entity) (S5_X8 Entity) (S5_X3 Entity)) (every_q S5_X8 (apply s5_h9 S5_X25 S5_X19) (apply s5_h4 S5_X3)))))
(assert (forall ((S5_X25 Entity) (S5_X19 Entity) (S5_X8 Entity)) (= (s5_h9 (S5_X25 Entity) (S5_X19 Entity) (S5_X8 Entity)) (neg s5_e13 (apply s5_h20 S5_X25 S5_X19 S5_X8)) (person S5_X8))))
(assert (forall ((S5_X3 Entity)) (= (s5_h7 (S5_X3 Entity)) (butler_n_1 S5_X3))))
(assert (forall ((S5_X3 Entity) (S5_X8 Entity)) (= (s5_h4 (S5_X3 Entity) (S5_X8 Entity)) (the_q S5_X3 s5_h7 (apply s5_h1 S5_X8)))))
(assert (forall ((S5_X8 Entity) (S5_X3 Entity)) (= (s5_h1 (S5_X8 Entity) (S5_X3 Entity)) (hate_v_1 s5_e2 S5_X3 S5_X8))))

(assert (exists ((S5_X25 Entity)) (s5_h29 S5_X25)))
(assert (exists ((S5_X25 Entity) (s5_h29 Handle) (s5_h23 Handle)) (s5_h26 S5_X25 s5_h29 s5_h23)))
(assert (exists ((S5_X19 Entity)) (s5_h23 S5_X19)))
(assert (exists ((S5_X19 Entity) (s5_h26 Handle) (s5_h15 Handle)) (s5_h20 S5_X19 s5_h26 s5_h15)))
(assert (exists ((s5_e18 Event) (s5_e16 Event) (S5_X19 Entity)) (s5_h15 s5_e18 s5_e16 S5_X19)))
(assert (exists ((S5_X8 Entity) (s5_h9 Handle) (s5_h4 Handle)) (s5_root S5_X8 s5_h9 s5_h4)))
(assert (exists ((s5_e13 Event) (s5_h20 Handle)) (s5_h9 s5_e13 s5_h20)))
(assert (exists ((S5_X3 Entity)) (s5_h7 S5_X3)))
(assert (exists ((S5_X3 Entity) (s5_h7 Handle) (s5_h1 Handle)) (s5_h4 S5_X3 s5_h7 s5_h1)))
(assert (exists ((s5_e2 Event) (S5_X3 Entity) (S5_X8 Entity)) (s5_h1 s5_e2 S5_X3 S5_X8)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s6_e2 Event)
(declare-const s6_e18 Event)
(declare-const s6_e26 Event)

(declare-fun s6_h23 (Entity) Bool)
(declare-fun s6_h20 (Entity Entity Entity) Bool)
(declare-fun s6_h17 (Entity Entity) Bool)
(declare-fun s6_h13 (Entity Entity Entity) Bool)
(declare-fun s6_root (Entity Entity Entity Entity) Bool)
(declare-fun s6_h9 (Entity Entity) Bool)
(declare-fun s6_h7 (Entity) Bool)
(declare-fun s6_h4 (Entity Entity) Bool)
(declare-fun s6_h1 (Entity Entity) Bool)

(assert (forall ((S6_X19 Entity)) (= (s6_h23 (S6_X19 Entity)) (aunt_n_of S6_X19))))
(assert (forall ((S6_X19 Entity) (S6_X14 Entity) (S6_X8 Entity)) (= (s6_h20 (S6_X19 Entity) (S6_X14 Entity) (S6_X8 Entity)) (udef_q S6_X19 s6_h23 (apply s6_h13 S6_X14 S6_X8)))))
(assert (forall ((S6_X19 Entity) (S6_X14 Entity)) (= (s6_h17 (S6_X19 Entity) (S6_X14 Entity)) (named S6_X14 ""Agatha"") (compound s6_e18 S6_X14 S6_X19))))
(assert (forall ((S6_X14 Entity) (S6_X8 Entity) (S6_X19 Entity)) (= (s6_h13 (S6_X14 Entity) (S6_X8 Entity) (S6_X19 Entity)) (proper_q S6_X14 (apply s6_h17 S6_X19) (apply s6_h9 S6_X8)))))
(assert (forall ((S6_X19 Entity) (S6_X14 Entity) (S6_X8 Entity) (S6_X3 Entity)) (= (s6_root (S6_X19 Entity) (S6_X14 Entity) (S6_X8 Entity) (S6_X3 Entity)) (every_q S6_X8 (apply s6_h20 S6_X19 S6_X14) (apply s6_h4 S6_X3)))))
(assert (forall ((S6_X8 Entity) (S6_X14 Entity)) (= (s6_h9 (S6_X8 Entity) (S6_X14 Entity)) (hate_v_1 s6_e26 S6_X14 S6_X8) (person S6_X8))))
(assert (forall ((S6_X3 Entity)) (= (s6_h7 (S6_X3 Entity)) (butler_n_1 S6_X3))))
(assert (forall ((S6_X3 Entity) (S6_X8 Entity)) (= (s6_h4 (S6_X3 Entity) (S6_X8 Entity)) (the_q S6_X3 s6_h7 (apply s6_h1 S6_X8)))))
(assert (forall ((S6_X8 Entity) (S6_X3 Entity)) (= (s6_h1 (S6_X8 Entity) (S6_X3 Entity)) (hate_v_1 s6_e2 S6_X3 S6_X8))))

(assert (exists ((S6_X19 Entity)) (s6_h23 S6_X19)))
(assert (exists ((S6_X19 Entity) (s6_h23 Handle) (s6_h13 Handle)) (s6_h20 S6_X19 s6_h23 s6_h13)))
(assert (exists ((S6_X14 Entity)) (s6_h17 S6_X14)))
(assert (exists ((S6_X14 Entity) (s6_h17 Handle) (s6_h9 Handle)) (s6_h13 S6_X14 s6_h17 s6_h9)))
(assert (exists ((S6_X8 Entity) (s6_h20 Handle) (s6_h4 Handle)) (s6_root S6_X8 s6_h20 s6_h4)))
(assert (exists ((s6_e26 Event) (S6_X14 Entity) (S6_X8 Entity)) (s6_h9 s6_e26 S6_X14 S6_X8)))
(assert (exists ((S6_X3 Entity)) (s6_h7 S6_X3)))
(assert (exists ((S6_X3 Entity) (s6_h7 Handle) (s6_h1 Handle)) (s6_h4 S6_X3 s6_h7 s6_h1)))
(assert (exists ((s6_e2 Event) (S6_X3 Entity) (S6_X8 Entity)) (s6_h1 s6_e2 S6_X3 S6_X8)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s7_e2 Event)

(declare-fun s7_root (Entity Entity) Bool)
(declare-fun s7_h9 (Entity) Bool)
(declare-fun s7_h5 (Entity Entity) Bool)
(declare-fun s7_h4 (Entity) Bool)
(declare-fun s7_h1 (Entity Entity) Bool)

(assert (forall ((S7_X8 Entity) (S7_X3 Entity)) (= (s7_root (S7_X8 Entity) (S7_X3 Entity)) (every_q S7_X8 s7_h9 (apply s7_h5 S7_X3)))))
(assert (forall ((S7_X8 Entity)) (= (s7_h9 (S7_X8 Entity)) (person S7_X8))))
(assert (forall ((S7_X3 Entity) (S7_X8 Entity)) (= (s7_h5 (S7_X3 Entity) (S7_X8 Entity)) (no_q S7_X3 s7_h4 (apply s7_h1 S7_X8)))))
(assert (forall ((S7_X3 Entity)) (= (s7_h4 (S7_X3 Entity)) (person S7_X3))))
(assert (forall ((S7_X8 Entity) (S7_X3 Entity)) (= (s7_h1 (S7_X8 Entity) (S7_X3 Entity)) (hate_v_1 s7_e2 S7_X3 S7_X8))))

(assert (exists ((S7_X8 Entity) (s7_h9 Handle) (s7_h5 Handle)) (s7_root S7_X8 s7_h9 s7_h5)))
(assert (exists ((S7_X8 Entity)) (s7_h9 S7_X8)))
(assert (exists ((S7_X3 Entity) (s7_h4 Handle) (s7_h1 Handle)) (s7_h5 S7_X3 s7_h4 s7_h1)))
(assert (exists ((S7_X3 Entity)) (s7_h4 S7_X3)))
(assert (exists ((s7_e2 Event) (S7_X3 Entity) (S7_X8 Entity)) (s7_h1 s7_e2 S7_X3 S7_X8)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s8_e2 Event)
(declare-const s8_e11 Event)

(declare-fun s8_h16 (Entity) Bool)
(declare-fun s8_h13 (Entity Entity) Bool)
(declare-fun s8_h9 (Entity Entity) Bool)
(declare-fun s8_h7 (Entity) Bool)
(declare-fun s8_h4 (Entity Entity) Bool)
(declare-fun s8_root (Entity Entity) Bool)

(assert (forall ((S8_X10 Entity)) (= (s8_h16 (S8_X10 Entity)) (butler_n_1 S8_X10))))
(assert (forall ((S8_X10 Entity) (S8_X3 Entity)) (= (s8_h13 (S8_X10 Entity) (S8_X3 Entity)) (the_q S8_X10 s8_h16 (apply s8_h4 S8_X3)))))
(assert (forall ((S8_X10 Entity) (S8_X3 Entity)) (= (s8_h9 (S8_X10 Entity) (S8_X3 Entity)) (be_v_id s8_e2 S8_X3 S8_X10))))
(assert (forall ((S8_X3 Entity)) (= (s8_h7 (S8_X3 Entity)) (named S8_X3 ""Agatha""))))
(assert (forall ((S8_X3 Entity) (S8_X10 Entity)) (= (s8_h4 (S8_X3 Entity) (S8_X10 Entity)) (proper_q S8_X3 s8_h7 (apply s8_h9 S8_X10)))))
(assert (forall ((S8_X10 Entity) (S8_X3 Entity)) (= (s8_root (S8_X10 Entity) (S8_X3 Entity)) (neg s8_e11 (apply s8_h13 S8_X10 S8_X3)))))

(assert (exists ((S8_X10 Entity)) (s8_h16 S8_X10)))
(assert (exists ((S8_X10 Entity) (s8_h16 Handle) (s8_h4 Handle)) (s8_h13 S8_X10 s8_h16 s8_h4)))
(assert (exists ((s8_e2 Event) (S8_X3 Entity) (S8_X10 Entity)) (s8_h9 s8_e2 S8_X3 S8_X10)))
(assert (exists ((S8_X3 Entity)) (s8_h7 S8_X3)))
(assert (exists ((S8_X3 Entity) (s8_h7 Handle) (s8_h9 Handle)) (s8_h4 S8_X3 s8_h7 s8_h9)))
(assert (exists ((s8_e11 Event) (s8_h13 Handle)) (s8_root s8_e11 s8_h13)))

; Library routines
(declare-fun a_q (Pred Pred) Bool)
(declare-fun every_q (Pred Pred) Bool)
(declare-fun some_q (Pred Pred) Bool)
(declare-fun the_q (Pred Pred) Bool)
(declare-fun proper_q (Pred Pred) Bool)
(declare-fun pronoun_q (Pred Pred) Bool)
(declare-fun udef_q (Pred Pred) Bool)
(declare-fun def_explicit_q (Pred Pred) Bool)
(declare-fun no_q (Pred Pred) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Entity) Bool)
(declare-fun people_n_of (Entity) Bool)
(declare-fun victim_n_of (Entity) Bool)
(declare-fun only_a_1 (Event Entity) Bool)
(declare-fun named (Entity String) Bool)
(declare-fun and_c_x (Entity Entity Entity) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Entity) Bool)
(declare-fun killer_n_1 (Entity) Bool)
(declare-fun implicit_conj (Entity Entity Entity) Bool)
(declare-fun be_v_id (Event Entity Entity) Bool)
(declare-fun in_p_loc (Event Event Entity) Bool)
(declare-fun compound (Event Entity Entity) Bool)
(declare-fun person (Entity) Bool)
(declare-fun kill_v_1 (Event Entity Entity) Bool)
(declare-fun hate_v_1 (Event Entity Entity) Bool)
(declare-fun pron (Entity) Bool)
(declare-fun poss (Event Entity Entity) Bool)
(declare-fun more_comp (Event Event Entity) Bool)
(declare-fun rich_a_in (Event Entity) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Entity) Bool)
(declare-fun card (Event Entity String) Bool)
(declare-fun generic_entity (Entity) Bool)
(declare-fun except_p (Event Entity Entity) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s9_e2 Event)
(declare-const s9_e9 Event)
(declare-const s9_e19 Event)

(declare-fun s9_h22 (Entity Entity) Bool)
(declare-fun s9_h21 (Entity) Bool)
(declare-fun s9_h18 (Entity Entity) Bool)
(declare-fun s9_h16 (Entity) Bool)
(declare-fun s9_root (Entity Entity) Bool)
(declare-fun s9_h6 () Bool)
(declare-fun s9_h4 () Bool)
(declare-fun s9_h1 (Entity Entity) Bool)

(assert (forall ((S9_X20 Entity) (S9_X13 Entity)) (= (s9_h22 (S9_X20 Entity) (S9_X13 Entity)) (pronoun_q S9_X20 s9_h21 (apply s9_h18 S9_X13)))))
(assert (forall ((S9_X20 Entity)) (= (s9_h21 (S9_X20 Entity)) (pron S9_X20))))
(assert (forall ((S9_X13 Entity) (S9_X20 Entity)) (= (s9_h18 (S9_X13 Entity) (S9_X20 Entity)) (kill_v_1 s9_e19 S9_X13 S9_X20))))
(assert (forall ((S9_X13 Entity)) (= (s9_h16 (S9_X13 Entity)) (named S9_X13 ""Agatha""))))
(assert (forall ((S9_X20 Entity) (S9_X13 Entity)) (= (s9_root (S9_X20 Entity) (S9_X13 Entity)) (proper_q S9_X13 s9_h16 (apply s9_h1 S9_X20)))))
(assert (= s9_h6 (therefore_a_1 s9_h4)))
(assert (= s9_h4 (unknown s9_e2)))
(assert (forall ((S9_X20 Entity) (S9_X13 Entity)) (= (s9_h1 (S9_X20 Entity) (S9_X13 Entity)) (colon_p_namely s9_e9 s9_h6 (apply s9_h22 S9_X20 S9_X13)))))

(assert (exists ((S9_X20 Entity) (s9_h21 Handle) (s9_h18 Handle)) (s9_h22 S9_X20 s9_h21 s9_h18)))
(assert (exists ((S9_X20 Entity)) (s9_h21 S9_X20)))
(assert (exists ((s9_e19 Event) (S9_X13 Entity) (S9_X20 Entity)) (s9_h18 s9_e19 S9_X13 S9_X20)))
(assert (exists ((S9_X13 Entity)) (s9_h16 S9_X13)))
(assert (exists ((S9_X13 Entity) (s9_h16 Handle) (s9_h1 Handle)) (s9_root S9_X13 s9_h16 s9_h1)))
(assert (exists ((s9_h4 Handle)) (s9_h6 s9_h4)))
(assert (exists ((s9_e2 Event)) (s9_h4 s9_e2)))
(assert (exists ((s9_e9 Event) (s9_h6 Handle) (s9_h22 Handle)) (s9_h1 s9_e9 s9_h6 s9_h22)))

(assert (and (distinct s0_e2 s0_e8) (distinct s0_e2 s0_e9) (distinct s0_e2 s0_e15) (distinct s0_e2 s0_e28) (distinct s0_e2 s1_e2) (distinct s0_e2 s1_e30) (distinct s0_e2 s1_e31) (distinct s0_e2 s1_e37) (distinct s0_e2 s1_e45) (distinct s0_e2 s1_e51) (distinct s0_e2 s1_e53) (distinct s0_e2 s1_e54) (distinct s0_e2 s2_e2) (distinct s0_e2 s2_e9) (distinct s0_e2 s2_e15) (distinct s0_e2 s2_e22) (distinct s0_e2 s2_e27) (distinct s0_e2 s2_e33) (distinct s0_e2 s3_e2) (distinct s0_e2 s3_e19) (distinct s0_e2 s3_e27) (distinct s0_e2 s4_e2) (distinct s0_e2 s4_e14) (distinct s0_e2 s5_e2) (distinct s0_e2 s5_e13) (distinct s0_e2 s5_e16) (distinct s0_e2 s5_e18) (distinct s0_e2 s5_e24) (distinct s0_e2 s6_e2) (distinct s0_e2 s6_e18) (distinct s0_e2 s6_e26) (distinct s0_e2 s7_e2) (distinct s0_e2 s8_e2) (distinct s0_e2 s8_e11) (distinct s0_e2 s9_e2) (distinct s0_e2 s9_e9) (distinct s0_e2 s9_e19) (distinct s0_e8 s0_e9) (distinct s0_e8 s0_e15) (distinct s0_e8 s0_e28) (distinct s0_e8 s1_e2) (distinct s0_e8 s1_e30) (distinct s0_e8 s1_e31) (distinct s0_e8 s1_e37) (distinct s0_e8 s1_e45) (distinct s0_e8 s1_e51) (distinct s0_e8 s1_e53) (distinct s0_e8 s1_e54) (distinct s0_e8 s2_e2) (distinct s0_e8 s2_e9) (distinct s0_e8 s2_e15) (distinct s0_e8 s2_e22) (distinct s0_e8 s2_e27) (distinct s0_e8 s2_e33) (distinct s0_e8 s3_e2) (distinct s0_e8 s3_e19) (distinct s0_e8 s3_e27) (distinct s0_e8 s4_e2) (distinct s0_e8 s4_e14) (distinct s0_e8 s5_e2) (distinct s0_e8 s5_e13) (distinct s0_e8 s5_e16) (distinct s0_e8 s5_e18) (distinct s0_e8 s5_e24) (distinct s0_e8 s6_e2) (distinct s0_e8 s6_e18) (distinct s0_e8 s6_e26) (distinct s0_e8 s7_e2) (distinct s0_e8 s8_e2) (distinct s0_e8 s8_e11) (distinct s0_e8 s9_e2) (distinct s0_e8 s9_e9) (distinct s0_e8 s9_e19) (distinct s0_e9 s0_e15) (distinct s0_e9 s0_e28) (distinct s0_e9 s1_e2) (distinct s0_e9 s1_e30) (distinct s0_e9 s1_e31) (distinct s0_e9 s1_e37) (distinct s0_e9 s1_e45) (distinct s0_e9 s1_e51) (distinct s0_e9 s1_e53) (distinct s0_e9 s1_e54) (distinct s0_e9 s2_e2) (distinct s0_e9 s2_e9) (distinct s0_e9 s2_e15) (distinct s0_e9 s2_e22) (distinct s0_e9 s2_e27) (distinct s0_e9 s2_e33) (distinct s0_e9 s3_e2) (distinct s0_e9 s3_e19) (distinct s0_e9 s3_e27) (distinct s0_e9 s4_e2) (distinct s0_e9 s4_e14) (distinct s0_e9 s5_e2) (distinct s0_e9 s5_e13) (distinct s0_e9 s5_e16) (distinct s0_e9 s5_e18) (distinct s0_e9 s5_e24) (distinct s0_e9 s6_e2) (distinct s0_e9 s6_e18) (distinct s0_e9 s6_e26) (distinct s0_e9 s7_e2) (distinct s0_e9 s8_e2) (distinct s0_e9 s8_e11) (distinct s0_e9 s9_e2) (distinct s0_e9 s9_e9) (distinct s0_e9 s9_e19) (distinct s0_e15 s0_e28) (distinct s0_e15 s1_e2) (distinct s0_e15 s1_e30) (distinct s0_e15 s1_e31) (distinct s0_e15 s1_e37) (distinct s0_e15 s1_e45) (distinct s0_e15 s1_e51) (distinct s0_e15 s1_e53) (distinct s0_e15 s1_e54) (distinct s0_e15 s2_e2) (distinct s0_e15 s2_e9) (distinct s0_e15 s2_e15) (distinct s0_e15 s2_e22) (distinct s0_e15 s2_e27) (distinct s0_e15 s2_e33) (distinct s0_e15 s3_e2) (distinct s0_e15 s3_e19) (distinct s0_e15 s3_e27) (distinct s0_e15 s4_e2) (distinct s0_e15 s4_e14) (distinct s0_e15 s5_e2) (distinct s0_e15 s5_e13) (distinct s0_e15 s5_e16) (distinct s0_e15 s5_e18) (distinct s0_e15 s5_e24) (distinct s0_e15 s6_e2) (distinct s0_e15 s6_e18) (distinct s0_e15 s6_e26) (distinct s0_e15 s7_e2) (distinct s0_e15 s8_e2) (distinct s0_e15 s8_e11) (distinct s0_e15 s9_e2) (distinct s0_e15 s9_e9) (distinct s0_e15 s9_e19) (distinct s0_e28 s1_e2) (distinct s0_e28 s1_e30) (distinct s0_e28 s1_e31) (distinct s0_e28 s1_e37) (distinct s0_e28 s1_e45) (distinct s0_e28 s1_e51) (distinct s0_e28 s1_e53) (distinct s0_e28 s1_e54) (distinct s0_e28 s2_e2) (distinct s0_e28 s2_e9) (distinct s0_e28 s2_e15) (distinct s0_e28 s2_e22) (distinct s0_e28 s2_e27) (distinct s0_e28 s2_e33) (distinct s0_e28 s3_e2) (distinct s0_e28 s3_e19) (distinct s0_e28 s3_e27) (distinct s0_e28 s4_e2) (distinct s0_e28 s4_e14) (distinct s0_e28 s5_e2) (distinct s0_e28 s5_e13) (distinct s0_e28 s5_e16) (distinct s0_e28 s5_e18) (distinct s0_e28 s5_e24) (distinct s0_e28 s6_e2) (distinct s0_e28 s6_e18) (distinct s0_e28 s6_e26) (distinct s0_e28 s7_e2) (distinct s0_e28 s8_e2) (distinct s0_e28 s8_e11) (distinct s0_e28 s9_e2) (distinct s0_e28 s9_e9) (distinct s0_e28 s9_e19) (distinct s1_e2 s1_e30) (distinct s1_e2 s1_e31) (distinct s1_e2 s1_e37) (distinct s1_e2 s1_e45) (distinct s1_e2 s1_e51) (distinct s1_e2 s1_e53) (distinct s1_e2 s1_e54) (distinct s1_e2 s2_e2) (distinct s1_e2 s2_e9) (distinct s1_e2 s2_e15) (distinct s1_e2 s2_e22) (distinct s1_e2 s2_e27) (distinct s1_e2 s2_e33) (distinct s1_e2 s3_e2) (distinct s1_e2 s3_e19) (distinct s1_e2 s3_e27) (distinct s1_e2 s4_e2) (distinct s1_e2 s4_e14) (distinct s1_e2 s5_e2) (distinct s1_e2 s5_e13) (distinct s1_e2 s5_e16) (distinct s1_e2 s5_e18) (distinct s1_e2 s5_e24) (distinct s1_e2 s6_e2) (distinct s1_e2 s6_e18) (distinct s1_e2 s6_e26) (distinct s1_e2 s7_e2) (distinct s1_e2 s8_e2) (distinct s1_e2 s8_e11) (distinct s1_e2 s9_e2) (distinct s1_e2 s9_e9) (distinct s1_e2 s9_e19) (distinct s1_e30 s1_e31) (distinct s1_e30 s1_e37) (distinct s1_e30 s1_e45) (distinct s1_e30 s1_e51) (distinct s1_e30 s1_e53) (distinct s1_e30 s1_e54) (distinct s1_e30 s2_e2) (distinct s1_e30 s2_e9) (distinct s1_e30 s2_e15) (distinct s1_e30 s2_e22) (distinct s1_e30 s2_e27) (distinct s1_e30 s2_e33) (distinct s1_e30 s3_e2) (distinct s1_e30 s3_e19) (distinct s1_e30 s3_e27) (distinct s1_e30 s4_e2) (distinct s1_e30 s4_e14) (distinct s1_e30 s5_e2) (distinct s1_e30 s5_e13) (distinct s1_e30 s5_e16) (distinct s1_e30 s5_e18) (distinct s1_e30 s5_e24) (distinct s1_e30 s6_e2) (distinct s1_e30 s6_e18) (distinct s1_e30 s6_e26) (distinct s1_e30 s7_e2) (distinct s1_e30 s8_e2) (distinct s1_e30 s8_e11) (distinct s1_e30 s9_e2) (distinct s1_e30 s9_e9) (distinct s1_e30 s9_e19) (distinct s1_e31 s1_e37) (distinct s1_e31 s1_e45) (distinct s1_e31 s1_e51) (distinct s1_e31 s1_e53) (distinct s1_e31 s1_e54) (distinct s1_e31 s2_e2) (distinct s1_e31 s2_e9) (distinct s1_e31 s2_e15) (distinct s1_e31 s2_e22) (distinct s1_e31 s2_e27) (distinct s1_e31 s2_e33) (distinct s1_e31 s3_e2) (distinct s1_e31 s3_e19) (distinct s1_e31 s3_e27) (distinct s1_e31 s4_e2) (distinct s1_e31 s4_e14) (distinct s1_e31 s5_e2) (distinct s1_e31 s5_e13) (distinct s1_e31 s5_e16) (distinct s1_e31 s5_e18) (distinct s1_e31 s5_e24) (distinct s1_e31 s6_e2) (distinct s1_e31 s6_e18) (distinct s1_e31 s6_e26) (distinct s1_e31 s7_e2) (distinct s1_e31 s8_e2) (distinct s1_e31 s8_e11) (distinct s1_e31 s9_e2) (distinct s1_e31 s9_e9) (distinct s1_e31 s9_e19) (distinct s1_e37 s1_e45) (distinct s1_e37 s1_e51) (distinct s1_e37 s1_e53) (distinct s1_e37 s1_e54) (distinct s1_e37 s2_e2) (distinct s1_e37 s2_e9) (distinct s1_e37 s2_e15) (distinct s1_e37 s2_e22) (distinct s1_e37 s2_e27) (distinct s1_e37 s2_e33) (distinct s1_e37 s3_e2) (distinct s1_e37 s3_e19) (distinct s1_e37 s3_e27) (distinct s1_e37 s4_e2) (distinct s1_e37 s4_e14) (distinct s1_e37 s5_e2) (distinct s1_e37 s5_e13) (distinct s1_e37 s5_e16) (distinct s1_e37 s5_e18) (distinct s1_e37 s5_e24) (distinct s1_e37 s6_e2) (distinct s1_e37 s6_e18) (distinct s1_e37 s6_e26) (distinct s1_e37 s7_e2) (distinct s1_e37 s8_e2) (distinct s1_e37 s8_e11) (distinct s1_e37 s9_e2) (distinct s1_e37 s9_e9) (distinct s1_e37 s9_e19) (distinct s1_e45 s1_e51) (distinct s1_e45 s1_e53) (distinct s1_e45 s1_e54) (distinct s1_e45 s2_e2) (distinct s1_e45 s2_e9) (distinct s1_e45 s2_e15) (distinct s1_e45 s2_e22) (distinct s1_e45 s2_e27) (distinct s1_e45 s2_e33) (distinct s1_e45 s3_e2) (distinct s1_e45 s3_e19) (distinct s1_e45 s3_e27) (distinct s1_e45 s4_e2) (distinct s1_e45 s4_e14) (distinct s1_e45 s5_e2) (distinct s1_e45 s5_e13) (distinct s1_e45 s5_e16) (distinct s1_e45 s5_e18) (distinct s1_e45 s5_e24) (distinct s1_e45 s6_e2) (distinct s1_e45 s6_e18) (distinct s1_e45 s6_e26) (distinct s1_e45 s7_e2) (distinct s1_e45 s8_e2) (distinct s1_e45 s8_e11) (distinct s1_e45 s9_e2) (distinct s1_e45 s9_e9) (distinct s1_e45 s9_e19) (distinct s1_e51 s1_e53) (distinct s1_e51 s1_e54) (distinct s1_e51 s2_e2) (distinct s1_e51 s2_e9) (distinct s1_e51 s2_e15) (distinct s1_e51 s2_e22) (distinct s1_e51 s2_e27) (distinct s1_e51 s2_e33) (distinct s1_e51 s3_e2) (distinct s1_e51 s3_e19) (distinct s1_e51 s3_e27) (distinct s1_e51 s4_e2) (distinct s1_e51 s4_e14) (distinct s1_e51 s5_e2) (distinct s1_e51 s5_e13) (distinct s1_e51 s5_e16) (distinct s1_e51 s5_e18) (distinct s1_e51 s5_e24) (distinct s1_e51 s6_e2) (distinct s1_e51 s6_e18) (distinct s1_e51 s6_e26) (distinct s1_e51 s7_e2) (distinct s1_e51 s8_e2) (distinct s1_e51 s8_e11) (distinct s1_e51 s9_e2) (distinct s1_e51 s9_e9) (distinct s1_e51 s9_e19) (distinct s1_e53 s1_e54) (distinct s1_e53 s2_e2) (distinct s1_e53 s2_e9) (distinct s1_e53 s2_e15) (distinct s1_e53 s2_e22) (distinct s1_e53 s2_e27) (distinct s1_e53 s2_e33) (distinct s1_e53 s3_e2) (distinct s1_e53 s3_e19) (distinct s1_e53 s3_e27) (distinct s1_e53 s4_e2) (distinct s1_e53 s4_e14) (distinct s1_e53 s5_e2) (distinct s1_e53 s5_e13) (distinct s1_e53 s5_e16) (distinct s1_e53 s5_e18) (distinct s1_e53 s5_e24) (distinct s1_e53 s6_e2) (distinct s1_e53 s6_e18) (distinct s1_e53 s6_e26) (distinct s1_e53 s7_e2) (distinct s1_e53 s8_e2) (distinct s1_e53 s8_e11) (distinct s1_e53 s9_e2) (distinct s1_e53 s9_e9) (distinct s1_e53 s9_e19) (distinct s1_e54 s2_e2) (distinct s1_e54 s2_e9) (distinct s1_e54 s2_e15) (distinct s1_e54 s2_e22) (distinct s1_e54 s2_e27) (distinct s1_e54 s2_e33) (distinct s1_e54 s3_e2) (distinct s1_e54 s3_e19) (distinct s1_e54 s3_e27) (distinct s1_e54 s4_e2) (distinct s1_e54 s4_e14) (distinct s1_e54 s5_e2) (distinct s1_e54 s5_e13) (distinct s1_e54 s5_e16) (distinct s1_e54 s5_e18) (distinct s1_e54 s5_e24) (distinct s1_e54 s6_e2) (distinct s1_e54 s6_e18) (distinct s1_e54 s6_e26) (distinct s1_e54 s7_e2) (distinct s1_e54 s8_e2) (distinct s1_e54 s8_e11) (distinct s1_e54 s9_e2) (distinct s1_e54 s9_e9) (distinct s1_e54 s9_e19) (distinct s2_e2 s2_e9) (distinct s2_e2 s2_e15) (distinct s2_e2 s2_e22) (distinct s2_e2 s2_e27) (distinct s2_e2 s2_e33) (distinct s2_e2 s3_e2) (distinct s2_e2 s3_e19) (distinct s2_e2 s3_e27) (distinct s2_e2 s4_e2) (distinct s2_e2 s4_e14) (distinct s2_e2 s5_e2) (distinct s2_e2 s5_e13) (distinct s2_e2 s5_e16) (distinct s2_e2 s5_e18) (distinct s2_e2 s5_e24) (distinct s2_e2 s6_e2) (distinct s2_e2 s6_e18) (distinct s2_e2 s6_e26) (distinct s2_e2 s7_e2) (distinct s2_e2 s8_e2) (distinct s2_e2 s8_e11) (distinct s2_e2 s9_e2) (distinct s2_e2 s9_e9) (distinct s2_e2 s9_e19) (distinct s2_e9 s2_e15) (distinct s2_e9 s2_e22) (distinct s2_e9 s2_e27) (distinct s2_e9 s2_e33) (distinct s2_e9 s3_e2) (distinct s2_e9 s3_e19) (distinct s2_e9 s3_e27) (distinct s2_e9 s4_e2) (distinct s2_e9 s4_e14) (distinct s2_e9 s5_e2) (distinct s2_e9 s5_e13) (distinct s2_e9 s5_e16) (distinct s2_e9 s5_e18) (distinct s2_e9 s5_e24) (distinct s2_e9 s6_e2) (distinct s2_e9 s6_e18) (distinct s2_e9 s6_e26) (distinct s2_e9 s7_e2) (distinct s2_e9 s8_e2) (distinct s2_e9 s8_e11) (distinct s2_e9 s9_e2) (distinct s2_e9 s9_e9) (distinct s2_e9 s9_e19) (distinct s2_e15 s2_e22) (distinct s2_e15 s2_e27) (distinct s2_e15 s2_e33) (distinct s2_e15 s3_e2) (distinct s2_e15 s3_e19) (distinct s2_e15 s3_e27) (distinct s2_e15 s4_e2) (distinct s2_e15 s4_e14) (distinct s2_e15 s5_e2) (distinct s2_e15 s5_e13) (distinct s2_e15 s5_e16) (distinct s2_e15 s5_e18) (distinct s2_e15 s5_e24) (distinct s2_e15 s6_e2) (distinct s2_e15 s6_e18) (distinct s2_e15 s6_e26) (distinct s2_e15 s7_e2) (distinct s2_e15 s8_e2) (distinct s2_e15 s8_e11) (distinct s2_e15 s9_e2) (distinct s2_e15 s9_e9) (distinct s2_e15 s9_e19) (distinct s2_e22 s2_e27) (distinct s2_e22 s2_e33) (distinct s2_e22 s3_e2) (distinct s2_e22 s3_e19) (distinct s2_e22 s3_e27) (distinct s2_e22 s4_e2) (distinct s2_e22 s4_e14) (distinct s2_e22 s5_e2) (distinct s2_e22 s5_e13) (distinct s2_e22 s5_e16) (distinct s2_e22 s5_e18) (distinct s2_e22 s5_e24) (distinct s2_e22 s6_e2) (distinct s2_e22 s6_e18) (distinct s2_e22 s6_e26) (distinct s2_e22 s7_e2) (distinct s2_e22 s8_e2) (distinct s2_e22 s8_e11) (distinct s2_e22 s9_e2) (distinct s2_e22 s9_e9) (distinct s2_e22 s9_e19) (distinct s2_e27 s2_e33) (distinct s2_e27 s3_e2) (distinct s2_e27 s3_e19) (distinct s2_e27 s3_e27) (distinct s2_e27 s4_e2) (distinct s2_e27 s4_e14) (distinct s2_e27 s5_e2) (distinct s2_e27 s5_e13) (distinct s2_e27 s5_e16) (distinct s2_e27 s5_e18) (distinct s2_e27 s5_e24) (distinct s2_e27 s6_e2) (distinct s2_e27 s6_e18) (distinct s2_e27 s6_e26) (distinct s2_e27 s7_e2) (distinct s2_e27 s8_e2) (distinct s2_e27 s8_e11) (distinct s2_e27 s9_e2) (distinct s2_e27 s9_e9) (distinct s2_e27 s9_e19) (distinct s2_e33 s3_e2) (distinct s2_e33 s3_e19) (distinct s2_e33 s3_e27) (distinct s2_e33 s4_e2) (distinct s2_e33 s4_e14) (distinct s2_e33 s5_e2) (distinct s2_e33 s5_e13) (distinct s2_e33 s5_e16) (distinct s2_e33 s5_e18) (distinct s2_e33 s5_e24) (distinct s2_e33 s6_e2) (distinct s2_e33 s6_e18) (distinct s2_e33 s6_e26) (distinct s2_e33 s7_e2) (distinct s2_e33 s8_e2) (distinct s2_e33 s8_e11) (distinct s2_e33 s9_e2) (distinct s2_e33 s9_e9) (distinct s2_e33 s9_e19) (distinct s3_e2 s3_e19) (distinct s3_e2 s3_e27) (distinct s3_e2 s4_e2) (distinct s3_e2 s4_e14) (distinct s3_e2 s5_e2) (distinct s3_e2 s5_e13) (distinct s3_e2 s5_e16) (distinct s3_e2 s5_e18) (distinct s3_e2 s5_e24) (distinct s3_e2 s6_e2) (distinct s3_e2 s6_e18) (distinct s3_e2 s6_e26) (distinct s3_e2 s7_e2) (distinct s3_e2 s8_e2) (distinct s3_e2 s8_e11) (distinct s3_e2 s9_e2) (distinct s3_e2 s9_e9) (distinct s3_e2 s9_e19) (distinct s3_e19 s3_e27) (distinct s3_e19 s4_e2) (distinct s3_e19 s4_e14) (distinct s3_e19 s5_e2) (distinct s3_e19 s5_e13) (distinct s3_e19 s5_e16) (distinct s3_e19 s5_e18) (distinct s3_e19 s5_e24) (distinct s3_e19 s6_e2) (distinct s3_e19 s6_e18) (distinct s3_e19 s6_e26) (distinct s3_e19 s7_e2) (distinct s3_e19 s8_e2) (distinct s3_e19 s8_e11) (distinct s3_e19 s9_e2) (distinct s3_e19 s9_e9) (distinct s3_e19 s9_e19) (distinct s3_e27 s4_e2) (distinct s3_e27 s4_e14) (distinct s3_e27 s5_e2) (distinct s3_e27 s5_e13) (distinct s3_e27 s5_e16) (distinct s3_e27 s5_e18) (distinct s3_e27 s5_e24) (distinct s3_e27 s6_e2) (distinct s3_e27 s6_e18) (distinct s3_e27 s6_e26) (distinct s3_e27 s7_e2) (distinct s3_e27 s8_e2) (distinct s3_e27 s8_e11) (distinct s3_e27 s9_e2) (distinct s3_e27 s9_e9) (distinct s3_e27 s9_e19) (distinct s4_e2 s4_e14) (distinct s4_e2 s5_e2) (distinct s4_e2 s5_e13) (distinct s4_e2 s5_e16) (distinct s4_e2 s5_e18) (distinct s4_e2 s5_e24) (distinct s4_e2 s6_e2) (distinct s4_e2 s6_e18) (distinct s4_e2 s6_e26) (distinct s4_e2 s7_e2) (distinct s4_e2 s8_e2) (distinct s4_e2 s8_e11) (distinct s4_e2 s9_e2) (distinct s4_e2 s9_e9) (distinct s4_e2 s9_e19) (distinct s4_e14 s5_e2) (distinct s4_e14 s5_e13) (distinct s4_e14 s5_e16) (distinct s4_e14 s5_e18) (distinct s4_e14 s5_e24) (distinct s4_e14 s6_e2) (distinct s4_e14 s6_e18) (distinct s4_e14 s6_e26) (distinct s4_e14 s7_e2) (distinct s4_e14 s8_e2) (distinct s4_e14 s8_e11) (distinct s4_e14 s9_e2) (distinct s4_e14 s9_e9) (distinct s4_e14 s9_e19) (distinct s5_e2 s5_e13) (distinct s5_e2 s5_e16) (distinct s5_e2 s5_e18) (distinct s5_e2 s5_e24) (distinct s5_e2 s6_e2) (distinct s5_e2 s6_e18) (distinct s5_e2 s6_e26) (distinct s5_e2 s7_e2) (distinct s5_e2 s8_e2) (distinct s5_e2 s8_e11) (distinct s5_e2 s9_e2) (distinct s5_e2 s9_e9) (distinct s5_e2 s9_e19) (distinct s5_e13 s5_e16) (distinct s5_e13 s5_e18) (distinct s5_e13 s5_e24) (distinct s5_e13 s6_e2) (distinct s5_e13 s6_e18) (distinct s5_e13 s6_e26) (distinct s5_e13 s7_e2) (distinct s5_e13 s8_e2) (distinct s5_e13 s8_e11) (distinct s5_e13 s9_e2) (distinct s5_e13 s9_e9) (distinct s5_e13 s9_e19) (distinct s5_e16 s5_e18) (distinct s5_e16 s5_e24) (distinct s5_e16 s6_e2) (distinct s5_e16 s6_e18) (distinct s5_e16 s6_e26) (distinct s5_e16 s7_e2) (distinct s5_e16 s8_e2) (distinct s5_e16 s8_e11) (distinct s5_e16 s9_e2) (distinct s5_e16 s9_e9) (distinct s5_e16 s9_e19) (distinct s5_e18 s5_e24) (distinct s5_e18 s6_e2) (distinct s5_e18 s6_e18) (distinct s5_e18 s6_e26) (distinct s5_e18 s7_e2) (distinct s5_e18 s8_e2) (distinct s5_e18 s8_e11) (distinct s5_e18 s9_e2) (distinct s5_e18 s9_e9) (distinct s5_e18 s9_e19) (distinct s5_e24 s6_e2) (distinct s5_e24 s6_e18) (distinct s5_e24 s6_e26) (distinct s5_e24 s7_e2) (distinct s5_e24 s8_e2) (distinct s5_e24 s8_e11) (distinct s5_e24 s9_e2) (distinct s5_e24 s9_e9) (distinct s5_e24 s9_e19) (distinct s6_e2 s6_e18) (distinct s6_e2 s6_e26) (distinct s6_e2 s7_e2) (distinct s6_e2 s8_e2) (distinct s6_e2 s8_e11) (distinct s6_e2 s9_e2) (distinct s6_e2 s9_e9) (distinct s6_e2 s9_e19) (distinct s6_e18 s6_e26) (distinct s6_e18 s7_e2) (distinct s6_e18 s8_e2) (distinct s6_e18 s8_e11) (distinct s6_e18 s9_e2) (distinct s6_e18 s9_e9) (distinct s6_e18 s9_e19) (distinct s6_e26 s7_e2) (distinct s6_e26 s8_e2) (distinct s6_e26 s8_e11) (distinct s6_e26 s9_e2) (distinct s6_e26 s9_e9) (distinct s6_e26 s9_e19) (distinct s7_e2 s8_e2) (distinct s7_e2 s8_e11) (distinct s7_e2 s9_e2) (distinct s7_e2 s9_e9) (distinct s7_e2 s9_e19) (distinct s8_e2 s8_e11) (distinct s8_e2 s9_e2) (distinct s8_e2 s9_e9) (distinct s8_e2 s9_e19) (distinct s8_e11 s9_e2) (distinct s8_e11 s9_e9) (distinct s8_e11 s9_e19) (distinct s9_e2 s9_e9) (distinct s9_e2 s9_e19) (distinct s9_e9 s9_e19)))

