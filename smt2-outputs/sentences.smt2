(set-logic ALL)

(declare-sort Individual 0)
(declare-sort Event 0)
(declare-sort Name 0)

(declare-const id_Agatha Name)
(declare-const id_Aunt Name)
(declare-const id_Charles Name)
(declare-const id_Dreadbury Name)
(declare-const id_Mansion Name)

; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(assert (and (distinct id_Dreadbury id_Mansion) (distinct id_Charles id_Mansion) (distinct id_Charles id_Dreadbury) (distinct id_Aunt id_Mansion) (distinct id_Aunt id_Dreadbury) (distinct id_Aunt id_Charles) (distinct id_Agatha id_Mansion) (distinct id_Agatha id_Dreadbury) (distinct id_Agatha id_Charles) (distinct id_Agatha id_Aunt)))

; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s0_e8 Event)
(declare-const s0_e9 Event)
(declare-const s0_e15 Event)
(declare-const s0_e2 Event)
(declare-const s0_e28 Event)

(declare-fun s0_h33 (Individual) Bool)
(declare-fun s0_root (Individual Individual Individual Individual Individual) Bool)
(declare-fun s0_h27 (Individual Individual) Bool)
(declare-fun s0_h24 (Individual Individual Individual Individual) Bool)
(declare-fun s0_h20 (Individual) Bool)
(declare-fun s0_h17 (Individual Individual) Bool)
(declare-fun s0_h14 (Individual Individual) Bool)
(declare-fun s0_h11 (Individual Individual Individual Individual Individual) Bool)
(declare-fun s0_h5 (Individual Individual Individual) Bool)
(declare-fun s0_h4 (Individual Individual) Bool)
(declare-fun s0_h1 (Individual Individual) Bool)

(assert (= s0_h33 (lambda ((S0_X29 Individual)) (named S0_X29 ""Aunt""))))
(assert (= s0_root (lambda ((S0_X29 Individual) (S0_X23 Individual) (S0_X16 Individual) (S0_X10 Individual) (S0_X3 Individual)) (proper_q S0_X29 s0_h33 (lambda (S0_X23 S0_X16 S0_X10 S0_X3) s0_h11)))))
(assert (= s0_h27 (lambda ((S0_X29 Individual) (S0_X23 Individual)) (named S0_X23 ""Agatha"") (compound s0_e28 S0_X23 S0_X29))))
(assert (= s0_h24 (lambda ((S0_X29 Individual) (S0_X23 Individual) (S0_X3 Individual) (S0_X10 Individual)) (proper_q S0_X23 (lambda (S0_X29) s0_h27) (lambda (S0_X10 S0_X3) s0_h5)))))
(assert (= s0_h20 (lambda ((S0_X16 Individual)) (named S0_X16 ""Dreadbury""))))
(assert (= s0_h17 (lambda ((S0_X16 Individual) (S0_X10 Individual)) (proper_q S0_X16 s0_h20 (lambda (S0_X10) s0_h14)))))
(assert (= s0_h14 (lambda ((S0_X10 Individual) (S0_X16 Individual)) (named S0_X10 ""Mansion"") (compound s0_e15 S0_X10 S0_X16))))
(assert (= s0_h11 (lambda ((S0_X23 Individual) (S0_X16 Individual) (S0_X10 Individual) (S0_X3 Individual) (S0_X29 Individual)) (proper_q S0_X10 (lambda (S0_X16) s0_h17) (lambda (S0_X29 S0_X23 S0_X3) s0_h24)))))
(assert (= s0_h5 (lambda ((S0_X10 Individual) (S0_X3 Individual) (S0_X23 Individual)) (some_q S0_X3 (lambda (S0_X10) s0_h4) (lambda (S0_X23) s0_h1)))))
(assert (= s0_h4 (lambda ((S0_X10 Individual) (S0_X3 Individual)) (in_p_loc s0_e9 s0_e8 S0_X10) (live_v_1 s0_e8 S0_X3) (person S0_X3))))
(assert (= s0_h1 (lambda ((S0_X23 Individual) (S0_X3 Individual)) (kill_v_1 s0_e2 S0_X3 S0_X23))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s1_e30 Event)
(declare-const s1_e31 Event)
(declare-const s1_e37 Event)
(declare-const s1_e45 Event)
(declare-const s1_e2 Event)
(declare-const s1_e51 Event)
(declare-const s1_e53 Event)
(declare-const s1_e54 Event)

(declare-fun s1_h50 (Individual) Bool)
(declare-fun s1_h47 (Individual Individual Individual Individual Individual) Bool)
(declare-fun s1_h42 (Individual) Bool)
(declare-fun s1_h39 (Individual Individual) Bool)
(declare-fun s1_h36 (Individual Individual) Bool)
(declare-fun s1_root (Individual Individual Individual Individual Individual Individual Individual Individual) Bool)
(declare-fun s1_h28 (Individual) Bool)
(declare-fun s1_h25 (Individual Individual Individual) Bool)
(declare-fun s1_h23 (Individual Individual Individual) Bool)
(declare-fun s1_h22 (Individual) Bool)
(declare-fun s1_h18 (Individual Individual Individual) Bool)
(declare-fun s1_h17 (Individual Individual Individual) Bool)
(declare-fun s1_h13 (Individual Individual Individual Individual Individual Individual Individual) Bool)
(declare-fun s1_h11 (Individual) Bool)
(declare-fun s1_h7 (Individual Individual Individual) Bool)
(declare-fun s1_h4 (Individual Individual Individual Individual Individual) Bool)
(declare-fun s1_h1 (Individual Individual Individual) Bool)

(assert (= s1_h50 (lambda ((S1_X46 Individual)) (therein_p_dir s1_e54 s1_e53) (live_v_1 s1_e53 S1_X46) (people_n_of S1_X46) (only_a_1 s1_e51 S1_X46))))
(assert (= s1_h47 (lambda ((S1_X46 Individual) (S1_X32 Individual) (S1_X8 Individual) (S1_X3 Individual) (S1_X14 Individual)) (the_q S1_X46 s1_h50 (lambda (S1_X32 S1_X14 S1_X8 S1_X3) s1_h4)))))
(assert (= s1_h42 (lambda ((S1_X38 Individual)) (named S1_X38 ""Dreadbury""))))
(assert (= s1_h39 (lambda ((S1_X38 Individual) (S1_X32 Individual)) (proper_q S1_X38 s1_h42 (lambda (S1_X32) s1_h36)))))
(assert (= s1_h36 (lambda ((S1_X32 Individual) (S1_X38 Individual)) (named S1_X32 ""Mansion"") (compound s1_e37 S1_X32 S1_X38))))
(assert (= s1_root (lambda ((S1_X46 Individual) (S1_X38 Individual) (S1_X32 Individual) (S1_X24 Individual) (S1_X19 Individual) (S1_X14 Individual) (S1_X8 Individual) (S1_X3 Individual)) (proper_q S1_X32 (lambda (S1_X38) s1_h39) (lambda (S1_X46 S1_X24 S1_X19 S1_X14 S1_X8 S1_X3) s1_h13)))))
(assert (= s1_h28 (lambda ((S1_X24 Individual)) (named S1_X24 ""Charles""))))
(assert (= s1_h25 (lambda ((S1_X24 Individual) (S1_X19 Individual) (S1_X14 Individual)) (proper_q S1_X24 s1_h28 (lambda (S1_X19 S1_X14) s1_h18)))))
(assert (= s1_h23 (lambda ((S1_X24 Individual) (S1_X14 Individual) (S1_X19 Individual)) (and_c_x S1_X14 S1_X19 S1_X24))))
(assert (= s1_h22 (lambda ((S1_X19 Individual)) (butler_n_1 S1_X19))))
(assert (= s1_h18 (lambda ((S1_X19 Individual) (S1_X14 Individual) (S1_X24 Individual)) (the_q S1_X19 s1_h22 (lambda (S1_X24 S1_X14) s1_h23)))))
(assert (= s1_h17 (lambda ((S1_X14 Individual) (S1_X3 Individual) (S1_X8 Individual)) (implicit_conj S1_X3 S1_X8 S1_X14))))
(assert (= s1_h13 (lambda ((S1_X46 Individual) (S1_X24 Individual) (S1_X19 Individual) (S1_X14 Individual) (S1_X8 Individual) (S1_X3 Individual) (S1_X32 Individual)) (udef_q S1_X14 (lambda (S1_X24 S1_X19) s1_h25) (lambda (S1_X46 S1_X32 S1_X8 S1_X3) s1_h47)))))
(assert (= s1_h11 (lambda ((S1_X8 Individual)) (named S1_X8 ""Agatha""))))
(assert (= s1_h7 (lambda ((S1_X14 Individual) (S1_X8 Individual) (S1_X3 Individual)) (proper_q S1_X8 s1_h11 (lambda (S1_X14 S1_X3) s1_h17)))))
(assert (= s1_h4 (lambda ((S1_X32 Individual) (S1_X14 Individual) (S1_X8 Individual) (S1_X3 Individual) (S1_X46 Individual)) (udef_q S1_X3 (lambda (S1_X14 S1_X8) s1_h7) (lambda (S1_X46 S1_X32) s1_h1)))))
(assert (= s1_h1 (lambda ((S1_X46 Individual) (S1_X32 Individual) (S1_X3 Individual)) (be_v_id s1_e45 S1_X3 S1_X46) (and_c_e s1_e2 s1_e30 s1_e45) (in_p_loc s1_e31 s1_e30 S1_X32) (live_v_1 s1_e30 S1_X3))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s2_e9 Event)
(declare-const s2_e15 Event)
(declare-const s2_e22 Event)
(declare-const s2_e2 Event)
(declare-const s2_e27 Event)
(declare-const s2_e33 Event)

(declare-fun s2_h38 (Individual) Bool)
(declare-fun s2_h35 (Individual Individual Individual Individual) Bool)
(declare-fun s2_h32 (Individual Individual) Bool)
(declare-fun s2_h29 (Individual Individual Individual) Bool)
(declare-fun s2_h25 (Individual Individual) Bool)
(declare-fun s2_h20 (Individual) Bool)
(declare-fun s2_h17 (Individual Individual) Bool)
(declare-fun s2_h14 (Individual Individual) Bool)
(declare-fun s2_root (Individual Individual Individual Individual Individual) Bool)
(declare-fun s2_h7 (Individual) Bool)
(declare-fun s2_h4 (Individual Individual Individual Individual) Bool)
(declare-fun s2_h1 (Individual Individual Individual Individual) Bool)

(assert (= s2_h38 (lambda ((S2_X34 Individual)) (pron S2_X34))))
(assert (= s2_h35 (lambda ((S2_X34 Individual) (S2_X28 Individual) (S2_X3 Individual) (S2_X10 Individual)) (pronoun_q S2_X34 s2_h38 (lambda (S2_X28 S2_X10 S2_X3) s2_h4)))))
(assert (= s2_h32 (lambda ((S2_X34 Individual) (S2_X28 Individual)) (victim_n_of S2_X28) (poss s2_e33 S2_X28 S2_X34))))
(assert (= s2_h29 (lambda ((S2_X34 Individual) (S2_X28 Individual) (S2_X3 Individual)) (def_explicit_q S2_X28 (lambda (S2_X34) s2_h32) (lambda (S2_X3) s2_h25)))))
(assert (= s2_h25 (lambda ((S2_X3 Individual) (S2_X28 Individual)) (more_comp s2_e27 s2_e22 S2_X28) (rich_a_in s2_e22 S2_X3))))
(assert (= s2_h20 (lambda ((S2_X16 Individual)) (pron S2_X16))))
(assert (= s2_h17 (lambda ((S2_X16 Individual) (S2_X10 Individual)) (pronoun_q S2_X16 s2_h20 (lambda (S2_X10) s2_h14)))))
(assert (= s2_h14 (lambda ((S2_X10 Individual) (S2_X16 Individual)) (victim_n_of S2_X10) (poss s2_e15 S2_X10 S2_X16))))
(assert (= s2_root (lambda ((S2_X34 Individual) (S2_X28 Individual) (S2_X16 Individual) (S2_X10 Individual) (S2_X3 Individual)) (def_explicit_q S2_X10 (lambda (S2_X16) s2_h17) (lambda (S2_X34 S2_X28 S2_X3) s2_h35)))))
(assert (= s2_h7 (lambda ((S2_X3 Individual)) (killer_n_1 S2_X3))))
(assert (= s2_h4 (lambda ((S2_X28 Individual) (S2_X10 Individual) (S2_X3 Individual) (S2_X34 Individual)) (a_q S2_X3 s2_h7 (lambda (S2_X34 S2_X28 S2_X10) s2_h1)))))
(assert (= s2_h1 (lambda ((S2_X34 Individual) (S2_X28 Individual) (S2_X10 Individual) (S2_X3 Individual)) (never_a_1 (lambda (S2_X34 S2_X28 S2_X3) s2_h29)) (and_c_e s2_e2 s2_e9 s2_e22) (hate_v_1 s2_e9 S2_X3 S2_X10) (always_a_1 s2_e9))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s3_e2 Event)
(declare-const s3_e19 Event)
(declare-const s3_e27 Event)

(declare-fun s3_h24 (Individual) Bool)
(declare-fun s3_root (Individual Individual Individual Individual) Bool)
(declare-fun s3_h18 (Individual Individual) Bool)
(declare-fun s3_h14 (Individual Individual Individual) Bool)
(declare-fun s3_h11 (Individual Individual Individual Individual) Bool)
(declare-fun s3_h10 (Individual Individual) Bool)
(declare-fun s3_h7 (Individual) Bool)
(declare-fun s3_h4 (Individual Individual) Bool)
(declare-fun s3_h1 (Individual Individual) Bool)

(assert (= s3_h24 (lambda ((S3_X20 Individual)) (aunt_n_of S3_X20))))
(assert (= s3_root (lambda ((S3_X20 Individual) (S3_X15 Individual) (S3_X9 Individual) (S3_X3 Individual)) (udef_q S3_X20 s3_h24 (lambda (S3_X15 S3_X9 S3_X3) s3_h11)))))
(assert (= s3_h18 (lambda ((S3_X20 Individual) (S3_X15 Individual)) (named S3_X15 ""Agatha"") (compound s3_e19 S3_X15 S3_X20))))
(assert (= s3_h14 (lambda ((S3_X20 Individual) (S3_X15 Individual) (S3_X9 Individual)) (proper_q S3_X15 (lambda (S3_X20) s3_h18) (lambda (S3_X9) s3_h10)))))
(assert (= s3_h11 (lambda ((S3_X15 Individual) (S3_X9 Individual) (S3_X3 Individual) (S3_X20 Individual)) (no_q S3_X9 (lambda (S3_X20 S3_X15) s3_h14) (lambda (S3_X3) s3_h4)))))
(assert (= s3_h10 (lambda ((S3_X9 Individual) (S3_X15 Individual)) (hate_v_1 s3_e27 S3_X15 S3_X9) (person S3_X9))))
(assert (= s3_h7 (lambda ((S3_X3 Individual)) (named S3_X3 ""Charles""))))
(assert (= s3_h4 (lambda ((S3_X3 Individual) (S3_X9 Individual)) (proper_q S3_X3 s3_h7 (lambda (S3_X9) s3_h1)))))
(assert (= s3_h1 (lambda ((S3_X9 Individual) (S3_X3 Individual)) (hate_v_1 s3_e2 S3_X3 S3_X9))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s4_e2 Event)
(declare-const s4_e14 Event)

(declare-fun s4_h19 (Individual) Bool)
(declare-fun s4_h16 (Individual Individual) Bool)
(declare-fun s4_root (Individual Individual Individual) Bool)
(declare-fun s4_h10 (Individual Individual) Bool)
(declare-fun s4_h7 (Individual) Bool)
(declare-fun s4_h4 (Individual Individual) Bool)
(declare-fun s4_h1 (Individual Individual) Bool)

(assert (= s4_h19 (lambda ((S4_X15 Individual)) (butler_n_1 S4_X15))))
(assert (= s4_h16 (lambda ((S4_X15 Individual) (S4_X9 Individual)) (the_q S4_X15 s4_h19 (lambda (S4_X9) s4_h10)))))
(assert (= s4_root (lambda ((S4_X15 Individual) (S4_X9 Individual) (S4_X3 Individual)) (every_q S4_X9 (lambda (S4_X15) s4_h16) (lambda (S4_X3) s4_h4)))))
(assert (= s4_h10 (lambda ((S4_X9 Individual) (S4_X15 Individual)) (except_p s4_e14 S4_X9 S4_X15) (person S4_X9))))
(assert (= s4_h7 (lambda ((S4_X3 Individual)) (named S4_X3 ""Agatha""))))
(assert (= s4_h4 (lambda ((S4_X3 Individual) (S4_X9 Individual)) (proper_q S4_X3 s4_h7 (lambda (S4_X9) s4_h1)))))
(assert (= s4_h1 (lambda ((S4_X9 Individual) (S4_X3 Individual)) (hate_v_1 s4_e2 S4_X3 S4_X9))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s5_e2 Event)
(declare-const s5_e13 Event)
(declare-const s5_e16 Event)
(declare-const s5_e18 Event)
(declare-const s5_e24 Event)

(declare-fun s5_h29 (Individual) Bool)
(declare-fun s5_h26 (Individual Individual) Bool)
(declare-fun s5_h23 (Individual Individual) Bool)
(declare-fun s5_h20 (Individual Individual Individual) Bool)
(declare-fun s5_h15 (Individual Individual) Bool)
(declare-fun s5_root (Individual Individual Individual Individual) Bool)
(declare-fun s5_h9 (Individual Individual Individual) Bool)
(declare-fun s5_h7 (Individual) Bool)
(declare-fun s5_h4 (Individual Individual) Bool)
(declare-fun s5_h1 (Individual Individual) Bool)

(assert (= s5_h29 (lambda ((S5_X25 Individual)) (named S5_X25 ""Aunt""))))
(assert (= s5_h26 (lambda ((S5_X25 Individual) (S5_X19 Individual)) (proper_q S5_X25 s5_h29 (lambda (S5_X19) s5_h23)))))
(assert (= s5_h23 (lambda ((S5_X19 Individual) (S5_X25 Individual)) (named S5_X19 ""Agatha"") (compound s5_e24 S5_X19 S5_X25))))
(assert (= s5_h20 (lambda ((S5_X25 Individual) (S5_X19 Individual) (S5_X8 Individual)) (proper_q S5_X19 (lambda (S5_X25) s5_h26) (lambda (S5_X8) s5_h15)))))
(assert (= s5_h15 (lambda ((S5_X8 Individual) (S5_X19 Individual)) (more_comp s5_e18 s5_e16 S5_X19) (rich_a_in s5_e16 S5_X8))))
(assert (= s5_root (lambda ((S5_X25 Individual) (S5_X19 Individual) (S5_X8 Individual) (S5_X3 Individual)) (every_q S5_X8 (lambda (S5_X25 S5_X19) s5_h9) (lambda (S5_X3) s5_h4)))))
(assert (= s5_h9 (lambda ((S5_X25 Individual) (S5_X19 Individual) (S5_X8 Individual)) (neg s5_e13 (lambda (S5_X25 S5_X19 S5_X8) s5_h20)) (person S5_X8))))
(assert (= s5_h7 (lambda ((S5_X3 Individual)) (butler_n_1 S5_X3))))
(assert (= s5_h4 (lambda ((S5_X3 Individual) (S5_X8 Individual)) (the_q S5_X3 s5_h7 (lambda (S5_X8) s5_h1)))))
(assert (= s5_h1 (lambda ((S5_X8 Individual) (S5_X3 Individual)) (hate_v_1 s5_e2 S5_X3 S5_X8))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s6_e2 Event)
(declare-const s6_e18 Event)
(declare-const s6_e26 Event)

(declare-fun s6_h23 (Individual) Bool)
(declare-fun s6_h20 (Individual Individual Individual) Bool)
(declare-fun s6_h17 (Individual Individual) Bool)
(declare-fun s6_h13 (Individual Individual Individual) Bool)
(declare-fun s6_root (Individual Individual Individual Individual) Bool)
(declare-fun s6_h9 (Individual Individual) Bool)
(declare-fun s6_h7 (Individual) Bool)
(declare-fun s6_h4 (Individual Individual) Bool)
(declare-fun s6_h1 (Individual Individual) Bool)

(assert (= s6_h23 (lambda ((S6_X19 Individual)) (aunt_n_of S6_X19))))
(assert (= s6_h20 (lambda ((S6_X19 Individual) (S6_X14 Individual) (S6_X8 Individual)) (udef_q S6_X19 s6_h23 (lambda (S6_X14 S6_X8) s6_h13)))))
(assert (= s6_h17 (lambda ((S6_X19 Individual) (S6_X14 Individual)) (named S6_X14 ""Agatha"") (compound s6_e18 S6_X14 S6_X19))))
(assert (= s6_h13 (lambda ((S6_X14 Individual) (S6_X8 Individual) (S6_X19 Individual)) (proper_q S6_X14 (lambda (S6_X19) s6_h17) (lambda (S6_X8) s6_h9)))))
(assert (= s6_root (lambda ((S6_X19 Individual) (S6_X14 Individual) (S6_X8 Individual) (S6_X3 Individual)) (every_q S6_X8 (lambda (S6_X19 S6_X14) s6_h20) (lambda (S6_X3) s6_h4)))))
(assert (= s6_h9 (lambda ((S6_X8 Individual) (S6_X14 Individual)) (hate_v_1 s6_e26 S6_X14 S6_X8) (person S6_X8))))
(assert (= s6_h7 (lambda ((S6_X3 Individual)) (butler_n_1 S6_X3))))
(assert (= s6_h4 (lambda ((S6_X3 Individual) (S6_X8 Individual)) (the_q S6_X3 s6_h7 (lambda (S6_X8) s6_h1)))))
(assert (= s6_h1 (lambda ((S6_X8 Individual) (S6_X3 Individual)) (hate_v_1 s6_e2 S6_X3 S6_X8))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s7_e2 Event)

(declare-fun s7_root (Individual Individual) Bool)
(declare-fun s7_h9 (Individual) Bool)
(declare-fun s7_h5 (Individual Individual) Bool)
(declare-fun s7_h4 (Individual) Bool)
(declare-fun s7_h1 (Individual Individual) Bool)

(assert (= s7_root (lambda ((S7_X8 Individual) (S7_X3 Individual)) (every_q S7_X8 s7_h9 (lambda (S7_X3) s7_h5)))))
(assert (= s7_h9 (lambda ((S7_X8 Individual)) (person S7_X8))))
(assert (= s7_h5 (lambda ((S7_X3 Individual) (S7_X8 Individual)) (no_q S7_X3 s7_h4 (lambda (S7_X8) s7_h1)))))
(assert (= s7_h4 (lambda ((S7_X3 Individual)) (person S7_X3))))
(assert (= s7_h1 (lambda ((S7_X8 Individual) (S7_X3 Individual)) (hate_v_1 s7_e2 S7_X3 S7_X8))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s8_e2 Event)
(declare-const s8_e11 Event)

(declare-fun s8_h16 (Individual) Bool)
(declare-fun s8_h13 (Individual Individual) Bool)
(declare-fun s8_h9 (Individual Individual) Bool)
(declare-fun s8_h7 (Individual) Bool)
(declare-fun s8_h4 (Individual Individual) Bool)
(declare-fun s8_root (Individual Individual) Bool)

(assert (= s8_h16 (lambda ((S8_X10 Individual)) (butler_n_1 S8_X10))))
(assert (= s8_h13 (lambda ((S8_X10 Individual) (S8_X3 Individual)) (the_q S8_X10 s8_h16 (lambda (S8_X3) s8_h4)))))
(assert (= s8_h9 (lambda ((S8_X10 Individual) (S8_X3 Individual)) (be_v_id s8_e2 S8_X3 S8_X10))))
(assert (= s8_h7 (lambda ((S8_X3 Individual)) (named S8_X3 ""Agatha""))))
(assert (= s8_h4 (lambda ((S8_X3 Individual) (S8_X10 Individual)) (proper_q S8_X3 s8_h7 (lambda (S8_X10) s8_h9)))))
(assert (= s8_root (lambda ((S8_X10 Individual) (S8_X3 Individual)) (neg s8_e11 (lambda (S8_X10 S8_X3) s8_h13)))))



; SMT2 declarations for common predicates and functions
(declare-sort Event 0)
(declare-sort Individual 0)
(declare-fun a_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun every_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun some_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun the_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun proper_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun pronoun_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun udef_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun def_explicit_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun no_q (Individual (-> Individual Bool) (-> Individual Bool)) Bool)
(declare-fun never_a_1 (Bool) Bool)
(declare-fun neg (Event Bool) Bool)
(declare-fun colon_p_namely (Event Bool Bool) Bool)
(declare-fun therein_p_dir (Event Event) Bool)
(declare-fun live_v_1 (Event Individual) Bool)
(declare-fun people_n_of (Individual) Bool)
(declare-fun victim_n_of (Individual) Bool)
(declare-fun only_a_1 (Event Individual) Bool)
(declare-fun named (Individual String) Bool)
(declare-fun and_c_x (Individual Individual Individual) Bool)
(declare-fun and_c_e (Event Event Event) Bool)
(declare-fun butler_n_1 (Individual) Bool)
(declare-fun killer_n_1 (Individual) Bool)
(declare-fun implicit_conj (Individual Individual Individual) Bool)
(declare-fun be_v_id (Event Individual Individual) Bool)
(declare-fun in_p_loc (Event Event Individual) Bool)
(declare-fun compound (Event Individual Individual) Bool)
(declare-fun person (Individual) Bool)
(declare-fun kill_v_1 (Event Individual Individual) Bool)
(declare-fun hate_v_1 (Event Individual Individual) Bool)
(declare-fun pron (Individual) Bool)
(declare-fun poss (Event Individual Individual) Bool)
(declare-fun more_comp (Event Event Individual) Bool)
(declare-fun rich_a_in (Event Individual) Bool)
(declare-fun always_a_1 (Event) Bool)
(declare-fun aunt_n_of (Individual) Bool)
(declare-fun card (Event Individual String) Bool)
(declare-fun generic_entity (Individual) Bool)
(declare-fun except_p (Event Individual Individual) Bool)
(declare-fun therefore_a_1 (Bool) Bool)
(declare-fun unknown (Event) Bool)

(declare-const s9_e2 Event)
(declare-const s9_e9 Event)
(declare-const s9_e19 Event)

(declare-fun s9_h22 (Individual Individual) Bool)
(declare-fun s9_h21 (Individual) Bool)
(declare-fun s9_h18 (Individual Individual) Bool)
(declare-fun s9_h16 (Individual) Bool)
(declare-fun s9_root (Individual Individual) Bool)
(declare-fun s9_h6 () Bool)
(declare-fun s9_h4 () Bool)
(declare-fun s9_h1 (Individual Individual) Bool)

(assert (= s9_h22 (lambda ((S9_X20 Individual) (S9_X13 Individual)) (pronoun_q S9_X20 s9_h21 (lambda (S9_X13) s9_h18)))))
(assert (= s9_h21 (lambda ((S9_X20 Individual)) (pron S9_X20))))
(assert (= s9_h18 (lambda ((S9_X13 Individual) (S9_X20 Individual)) (kill_v_1 s9_e19 S9_X13 S9_X20))))
(assert (= s9_h16 (lambda ((S9_X13 Individual)) (named S9_X13 ""Agatha""))))
(assert (= s9_root (lambda ((S9_X20 Individual) (S9_X13 Individual)) (proper_q S9_X13 s9_h16 (lambda (S9_X20) s9_h1)))))
(assert (= s9_h6 (therefore_a_1 s9_h4)))
(assert (= s9_h4 (unknown s9_e2)))
(assert (= s9_h1 (lambda ((S9_X20 Individual) (S9_X13 Individual)) (colon_p_namely s9_e9 s9_h6 (lambda (S9_X20 S9_X13) s9_h22)))))



(assert (and (distinct s0_e2 s0_e8) (distinct s0_e2 s0_e9) (distinct s0_e2 s0_e15) (distinct s0_e2 s0_e28) (distinct s0_e2 s1_e2) (distinct s0_e2 s1_e30) (distinct s0_e2 s1_e31) (distinct s0_e2 s1_e37) (distinct s0_e2 s1_e45) (distinct s0_e2 s1_e51) (distinct s0_e2 s1_e53) (distinct s0_e2 s1_e54) (distinct s0_e2 s2_e2) (distinct s0_e2 s2_e9) (distinct s0_e2 s2_e15) (distinct s0_e2 s2_e22) (distinct s0_e2 s2_e27) (distinct s0_e2 s2_e33) (distinct s0_e2 s3_e2) (distinct s0_e2 s3_e19) (distinct s0_e2 s3_e27) (distinct s0_e2 s4_e2) (distinct s0_e2 s4_e14) (distinct s0_e2 s5_e2) (distinct s0_e2 s5_e13) (distinct s0_e2 s5_e16) (distinct s0_e2 s5_e18) (distinct s0_e2 s5_e24) (distinct s0_e2 s6_e2) (distinct s0_e2 s6_e18) (distinct s0_e2 s6_e26) (distinct s0_e2 s7_e2) (distinct s0_e2 s8_e2) (distinct s0_e2 s8_e11) (distinct s0_e2 s9_e2) (distinct s0_e2 s9_e9) (distinct s0_e2 s9_e19) (distinct s0_e8 s0_e9) (distinct s0_e8 s0_e15) (distinct s0_e8 s0_e28) (distinct s0_e8 s1_e2) (distinct s0_e8 s1_e30) (distinct s0_e8 s1_e31) (distinct s0_e8 s1_e37) (distinct s0_e8 s1_e45) (distinct s0_e8 s1_e51) (distinct s0_e8 s1_e53) (distinct s0_e8 s1_e54) (distinct s0_e8 s2_e2) (distinct s0_e8 s2_e9) (distinct s0_e8 s2_e15) (distinct s0_e8 s2_e22) (distinct s0_e8 s2_e27) (distinct s0_e8 s2_e33) (distinct s0_e8 s3_e2) (distinct s0_e8 s3_e19) (distinct s0_e8 s3_e27) (distinct s0_e8 s4_e2) (distinct s0_e8 s4_e14) (distinct s0_e8 s5_e2) (distinct s0_e8 s5_e13) (distinct s0_e8 s5_e16) (distinct s0_e8 s5_e18) (distinct s0_e8 s5_e24) (distinct s0_e8 s6_e2) (distinct s0_e8 s6_e18) (distinct s0_e8 s6_e26) (distinct s0_e8 s7_e2) (distinct s0_e8 s8_e2) (distinct s0_e8 s8_e11) (distinct s0_e8 s9_e2) (distinct s0_e8 s9_e9) (distinct s0_e8 s9_e19) (distinct s0_e9 s0_e15) (distinct s0_e9 s0_e28) (distinct s0_e9 s1_e2) (distinct s0_e9 s1_e30) (distinct s0_e9 s1_e31) (distinct s0_e9 s1_e37) (distinct s0_e9 s1_e45) (distinct s0_e9 s1_e51) (distinct s0_e9 s1_e53) (distinct s0_e9 s1_e54) (distinct s0_e9 s2_e2) (distinct s0_e9 s2_e9) (distinct s0_e9 s2_e15) (distinct s0_e9 s2_e22) (distinct s0_e9 s2_e27) (distinct s0_e9 s2_e33) (distinct s0_e9 s3_e2) (distinct s0_e9 s3_e19) (distinct s0_e9 s3_e27) (distinct s0_e9 s4_e2) (distinct s0_e9 s4_e14) (distinct s0_e9 s5_e2) (distinct s0_e9 s5_e13) (distinct s0_e9 s5_e16) (distinct s0_e9 s5_e18) (distinct s0_e9 s5_e24) (distinct s0_e9 s6_e2) (distinct s0_e9 s6_e18) (distinct s0_e9 s6_e26) (distinct s0_e9 s7_e2) (distinct s0_e9 s8_e2) (distinct s0_e9 s8_e11) (distinct s0_e9 s9_e2) (distinct s0_e9 s9_e9) (distinct s0_e9 s9_e19) (distinct s0_e15 s0_e28) (distinct s0_e15 s1_e2) (distinct s0_e15 s1_e30) (distinct s0_e15 s1_e31) (distinct s0_e15 s1_e37) (distinct s0_e15 s1_e45) (distinct s0_e15 s1_e51) (distinct s0_e15 s1_e53) (distinct s0_e15 s1_e54) (distinct s0_e15 s2_e2) (distinct s0_e15 s2_e9) (distinct s0_e15 s2_e15) (distinct s0_e15 s2_e22) (distinct s0_e15 s2_e27) (distinct s0_e15 s2_e33) (distinct s0_e15 s3_e2) (distinct s0_e15 s3_e19) (distinct s0_e15 s3_e27) (distinct s0_e15 s4_e2) (distinct s0_e15 s4_e14) (distinct s0_e15 s5_e2) (distinct s0_e15 s5_e13) (distinct s0_e15 s5_e16) (distinct s0_e15 s5_e18) (distinct s0_e15 s5_e24) (distinct s0_e15 s6_e2) (distinct s0_e15 s6_e18) (distinct s0_e15 s6_e26) (distinct s0_e15 s7_e2) (distinct s0_e15 s8_e2) (distinct s0_e15 s8_e11) (distinct s0_e15 s9_e2) (distinct s0_e15 s9_e9) (distinct s0_e15 s9_e19) (distinct s0_e28 s1_e2) (distinct s0_e28 s1_e30) (distinct s0_e28 s1_e31) (distinct s0_e28 s1_e37) (distinct s0_e28 s1_e45) (distinct s0_e28 s1_e51) (distinct s0_e28 s1_e53) (distinct s0_e28 s1_e54) (distinct s0_e28 s2_e2) (distinct s0_e28 s2_e9) (distinct s0_e28 s2_e15) (distinct s0_e28 s2_e22) (distinct s0_e28 s2_e27) (distinct s0_e28 s2_e33) (distinct s0_e28 s3_e2) (distinct s0_e28 s3_e19) (distinct s0_e28 s3_e27) (distinct s0_e28 s4_e2) (distinct s0_e28 s4_e14) (distinct s0_e28 s5_e2) (distinct s0_e28 s5_e13) (distinct s0_e28 s5_e16) (distinct s0_e28 s5_e18) (distinct s0_e28 s5_e24) (distinct s0_e28 s6_e2) (distinct s0_e28 s6_e18) (distinct s0_e28 s6_e26) (distinct s0_e28 s7_e2) (distinct s0_e28 s8_e2) (distinct s0_e28 s8_e11) (distinct s0_e28 s9_e2) (distinct s0_e28 s9_e9) (distinct s0_e28 s9_e19) (distinct s1_e2 s1_e30) (distinct s1_e2 s1_e31) (distinct s1_e2 s1_e37) (distinct s1_e2 s1_e45) (distinct s1_e2 s1_e51) (distinct s1_e2 s1_e53) (distinct s1_e2 s1_e54) (distinct s1_e2 s2_e2) (distinct s1_e2 s2_e9) (distinct s1_e2 s2_e15) (distinct s1_e2 s2_e22) (distinct s1_e2 s2_e27) (distinct s1_e2 s2_e33) (distinct s1_e2 s3_e2) (distinct s1_e2 s3_e19) (distinct s1_e2 s3_e27) (distinct s1_e2 s4_e2) (distinct s1_e2 s4_e14) (distinct s1_e2 s5_e2) (distinct s1_e2 s5_e13) (distinct s1_e2 s5_e16) (distinct s1_e2 s5_e18) (distinct s1_e2 s5_e24) (distinct s1_e2 s6_e2) (distinct s1_e2 s6_e18) (distinct s1_e2 s6_e26) (distinct s1_e2 s7_e2) (distinct s1_e2 s8_e2) (distinct s1_e2 s8_e11) (distinct s1_e2 s9_e2) (distinct s1_e2 s9_e9) (distinct s1_e2 s9_e19) (distinct s1_e30 s1_e31) (distinct s1_e30 s1_e37) (distinct s1_e30 s1_e45) (distinct s1_e30 s1_e51) (distinct s1_e30 s1_e53) (distinct s1_e30 s1_e54) (distinct s1_e30 s2_e2) (distinct s1_e30 s2_e9) (distinct s1_e30 s2_e15) (distinct s1_e30 s2_e22) (distinct s1_e30 s2_e27) (distinct s1_e30 s2_e33) (distinct s1_e30 s3_e2) (distinct s1_e30 s3_e19) (distinct s1_e30 s3_e27) (distinct s1_e30 s4_e2) (distinct s1_e30 s4_e14) (distinct s1_e30 s5_e2) (distinct s1_e30 s5_e13) (distinct s1_e30 s5_e16) (distinct s1_e30 s5_e18) (distinct s1_e30 s5_e24) (distinct s1_e30 s6_e2) (distinct s1_e30 s6_e18) (distinct s1_e30 s6_e26) (distinct s1_e30 s7_e2) (distinct s1_e30 s8_e2) (distinct s1_e30 s8_e11) (distinct s1_e30 s9_e2) (distinct s1_e30 s9_e9) (distinct s1_e30 s9_e19) (distinct s1_e31 s1_e37) (distinct s1_e31 s1_e45) (distinct s1_e31 s1_e51) (distinct s1_e31 s1_e53) (distinct s1_e31 s1_e54) (distinct s1_e31 s2_e2) (distinct s1_e31 s2_e9) (distinct s1_e31 s2_e15) (distinct s1_e31 s2_e22) (distinct s1_e31 s2_e27) (distinct s1_e31 s2_e33) (distinct s1_e31 s3_e2) (distinct s1_e31 s3_e19) (distinct s1_e31 s3_e27) (distinct s1_e31 s4_e2) (distinct s1_e31 s4_e14) (distinct s1_e31 s5_e2) (distinct s1_e31 s5_e13) (distinct s1_e31 s5_e16) (distinct s1_e31 s5_e18) (distinct s1_e31 s5_e24) (distinct s1_e31 s6_e2) (distinct s1_e31 s6_e18) (distinct s1_e31 s6_e26) (distinct s1_e31 s7_e2) (distinct s1_e31 s8_e2) (distinct s1_e31 s8_e11) (distinct s1_e31 s9_e2) (distinct s1_e31 s9_e9) (distinct s1_e31 s9_e19) (distinct s1_e37 s1_e45) (distinct s1_e37 s1_e51) (distinct s1_e37 s1_e53) (distinct s1_e37 s1_e54) (distinct s1_e37 s2_e2) (distinct s1_e37 s2_e9) (distinct s1_e37 s2_e15) (distinct s1_e37 s2_e22) (distinct s1_e37 s2_e27) (distinct s1_e37 s2_e33) (distinct s1_e37 s3_e2) (distinct s1_e37 s3_e19) (distinct s1_e37 s3_e27) (distinct s1_e37 s4_e2) (distinct s1_e37 s4_e14) (distinct s1_e37 s5_e2) (distinct s1_e37 s5_e13) (distinct s1_e37 s5_e16) (distinct s1_e37 s5_e18) (distinct s1_e37 s5_e24) (distinct s1_e37 s6_e2) (distinct s1_e37 s6_e18) (distinct s1_e37 s6_e26) (distinct s1_e37 s7_e2) (distinct s1_e37 s8_e2) (distinct s1_e37 s8_e11) (distinct s1_e37 s9_e2) (distinct s1_e37 s9_e9) (distinct s1_e37 s9_e19) (distinct s1_e45 s1_e51) (distinct s1_e45 s1_e53) (distinct s1_e45 s1_e54) (distinct s1_e45 s2_e2) (distinct s1_e45 s2_e9) (distinct s1_e45 s2_e15) (distinct s1_e45 s2_e22) (distinct s1_e45 s2_e27) (distinct s1_e45 s2_e33) (distinct s1_e45 s3_e2) (distinct s1_e45 s3_e19) (distinct s1_e45 s3_e27) (distinct s1_e45 s4_e2) (distinct s1_e45 s4_e14) (distinct s1_e45 s5_e2) (distinct s1_e45 s5_e13) (distinct s1_e45 s5_e16) (distinct s1_e45 s5_e18) (distinct s1_e45 s5_e24) (distinct s1_e45 s6_e2) (distinct s1_e45 s6_e18) (distinct s1_e45 s6_e26) (distinct s1_e45 s7_e2) (distinct s1_e45 s8_e2) (distinct s1_e45 s8_e11) (distinct s1_e45 s9_e2) (distinct s1_e45 s9_e9) (distinct s1_e45 s9_e19) (distinct s1_e51 s1_e53) (distinct s1_e51 s1_e54) (distinct s1_e51 s2_e2) (distinct s1_e51 s2_e9) (distinct s1_e51 s2_e15) (distinct s1_e51 s2_e22) (distinct s1_e51 s2_e27) (distinct s1_e51 s2_e33) (distinct s1_e51 s3_e2) (distinct s1_e51 s3_e19) (distinct s1_e51 s3_e27) (distinct s1_e51 s4_e2) (distinct s1_e51 s4_e14) (distinct s1_e51 s5_e2) (distinct s1_e51 s5_e13) (distinct s1_e51 s5_e16) (distinct s1_e51 s5_e18) (distinct s1_e51 s5_e24) (distinct s1_e51 s6_e2) (distinct s1_e51 s6_e18) (distinct s1_e51 s6_e26) (distinct s1_e51 s7_e2) (distinct s1_e51 s8_e2) (distinct s1_e51 s8_e11) (distinct s1_e51 s9_e2) (distinct s1_e51 s9_e9) (distinct s1_e51 s9_e19) (distinct s1_e53 s1_e54) (distinct s1_e53 s2_e2) (distinct s1_e53 s2_e9) (distinct s1_e53 s2_e15) (distinct s1_e53 s2_e22) (distinct s1_e53 s2_e27) (distinct s1_e53 s2_e33) (distinct s1_e53 s3_e2) (distinct s1_e53 s3_e19) (distinct s1_e53 s3_e27) (distinct s1_e53 s4_e2) (distinct s1_e53 s4_e14) (distinct s1_e53 s5_e2) (distinct s1_e53 s5_e13) (distinct s1_e53 s5_e16) (distinct s1_e53 s5_e18) (distinct s1_e53 s5_e24) (distinct s1_e53 s6_e2) (distinct s1_e53 s6_e18) (distinct s1_e53 s6_e26) (distinct s1_e53 s7_e2) (distinct s1_e53 s8_e2) (distinct s1_e53 s8_e11) (distinct s1_e53 s9_e2) (distinct s1_e53 s9_e9) (distinct s1_e53 s9_e19) (distinct s1_e54 s2_e2) (distinct s1_e54 s2_e9) (distinct s1_e54 s2_e15) (distinct s1_e54 s2_e22) (distinct s1_e54 s2_e27) (distinct s1_e54 s2_e33) (distinct s1_e54 s3_e2) (distinct s1_e54 s3_e19) (distinct s1_e54 s3_e27) (distinct s1_e54 s4_e2) (distinct s1_e54 s4_e14) (distinct s1_e54 s5_e2) (distinct s1_e54 s5_e13) (distinct s1_e54 s5_e16) (distinct s1_e54 s5_e18) (distinct s1_e54 s5_e24) (distinct s1_e54 s6_e2) (distinct s1_e54 s6_e18) (distinct s1_e54 s6_e26) (distinct s1_e54 s7_e2) (distinct s1_e54 s8_e2) (distinct s1_e54 s8_e11) (distinct s1_e54 s9_e2) (distinct s1_e54 s9_e9) (distinct s1_e54 s9_e19) (distinct s2_e2 s2_e9) (distinct s2_e2 s2_e15) (distinct s2_e2 s2_e22) (distinct s2_e2 s2_e27) (distinct s2_e2 s2_e33) (distinct s2_e2 s3_e2) (distinct s2_e2 s3_e19) (distinct s2_e2 s3_e27) (distinct s2_e2 s4_e2) (distinct s2_e2 s4_e14) (distinct s2_e2 s5_e2) (distinct s2_e2 s5_e13) (distinct s2_e2 s5_e16) (distinct s2_e2 s5_e18) (distinct s2_e2 s5_e24) (distinct s2_e2 s6_e2) (distinct s2_e2 s6_e18) (distinct s2_e2 s6_e26) (distinct s2_e2 s7_e2) (distinct s2_e2 s8_e2) (distinct s2_e2 s8_e11) (distinct s2_e2 s9_e2) (distinct s2_e2 s9_e9) (distinct s2_e2 s9_e19) (distinct s2_e9 s2_e15) (distinct s2_e9 s2_e22) (distinct s2_e9 s2_e27) (distinct s2_e9 s2_e33) (distinct s2_e9 s3_e2) (distinct s2_e9 s3_e19) (distinct s2_e9 s3_e27) (distinct s2_e9 s4_e2) (distinct s2_e9 s4_e14) (distinct s2_e9 s5_e2) (distinct s2_e9 s5_e13) (distinct s2_e9 s5_e16) (distinct s2_e9 s5_e18) (distinct s2_e9 s5_e24) (distinct s2_e9 s6_e2) (distinct s2_e9 s6_e18) (distinct s2_e9 s6_e26) (distinct s2_e9 s7_e2) (distinct s2_e9 s8_e2) (distinct s2_e9 s8_e11) (distinct s2_e9 s9_e2) (distinct s2_e9 s9_e9) (distinct s2_e9 s9_e19) (distinct s2_e15 s2_e22) (distinct s2_e15 s2_e27) (distinct s2_e15 s2_e33) (distinct s2_e15 s3_e2) (distinct s2_e15 s3_e19) (distinct s2_e15 s3_e27) (distinct s2_e15 s4_e2) (distinct s2_e15 s4_e14) (distinct s2_e15 s5_e2) (distinct s2_e15 s5_e13) (distinct s2_e15 s5_e16) (distinct s2_e15 s5_e18) (distinct s2_e15 s5_e24) (distinct s2_e15 s6_e2) (distinct s2_e15 s6_e18) (distinct s2_e15 s6_e26) (distinct s2_e15 s7_e2) (distinct s2_e15 s8_e2) (distinct s2_e15 s8_e11) (distinct s2_e15 s9_e2) (distinct s2_e15 s9_e9) (distinct s2_e15 s9_e19) (distinct s2_e22 s2_e27) (distinct s2_e22 s2_e33) (distinct s2_e22 s3_e2) (distinct s2_e22 s3_e19) (distinct s2_e22 s3_e27) (distinct s2_e22 s4_e2) (distinct s2_e22 s4_e14) (distinct s2_e22 s5_e2) (distinct s2_e22 s5_e13) (distinct s2_e22 s5_e16) (distinct s2_e22 s5_e18) (distinct s2_e22 s5_e24) (distinct s2_e22 s6_e2) (distinct s2_e22 s6_e18) (distinct s2_e22 s6_e26) (distinct s2_e22 s7_e2) (distinct s2_e22 s8_e2) (distinct s2_e22 s8_e11) (distinct s2_e22 s9_e2) (distinct s2_e22 s9_e9) (distinct s2_e22 s9_e19) (distinct s2_e27 s2_e33) (distinct s2_e27 s3_e2) (distinct s2_e27 s3_e19) (distinct s2_e27 s3_e27) (distinct s2_e27 s4_e2) (distinct s2_e27 s4_e14) (distinct s2_e27 s5_e2) (distinct s2_e27 s5_e13) (distinct s2_e27 s5_e16) (distinct s2_e27 s5_e18) (distinct s2_e27 s5_e24) (distinct s2_e27 s6_e2) (distinct s2_e27 s6_e18) (distinct s2_e27 s6_e26) (distinct s2_e27 s7_e2) (distinct s2_e27 s8_e2) (distinct s2_e27 s8_e11) (distinct s2_e27 s9_e2) (distinct s2_e27 s9_e9) (distinct s2_e27 s9_e19) (distinct s2_e33 s3_e2) (distinct s2_e33 s3_e19) (distinct s2_e33 s3_e27) (distinct s2_e33 s4_e2) (distinct s2_e33 s4_e14) (distinct s2_e33 s5_e2) (distinct s2_e33 s5_e13) (distinct s2_e33 s5_e16) (distinct s2_e33 s5_e18) (distinct s2_e33 s5_e24) (distinct s2_e33 s6_e2) (distinct s2_e33 s6_e18) (distinct s2_e33 s6_e26) (distinct s2_e33 s7_e2) (distinct s2_e33 s8_e2) (distinct s2_e33 s8_e11) (distinct s2_e33 s9_e2) (distinct s2_e33 s9_e9) (distinct s2_e33 s9_e19) (distinct s3_e2 s3_e19) (distinct s3_e2 s3_e27) (distinct s3_e2 s4_e2) (distinct s3_e2 s4_e14) (distinct s3_e2 s5_e2) (distinct s3_e2 s5_e13) (distinct s3_e2 s5_e16) (distinct s3_e2 s5_e18) (distinct s3_e2 s5_e24) (distinct s3_e2 s6_e2) (distinct s3_e2 s6_e18) (distinct s3_e2 s6_e26) (distinct s3_e2 s7_e2) (distinct s3_e2 s8_e2) (distinct s3_e2 s8_e11) (distinct s3_e2 s9_e2) (distinct s3_e2 s9_e9) (distinct s3_e2 s9_e19) (distinct s3_e19 s3_e27) (distinct s3_e19 s4_e2) (distinct s3_e19 s4_e14) (distinct s3_e19 s5_e2) (distinct s3_e19 s5_e13) (distinct s3_e19 s5_e16) (distinct s3_e19 s5_e18) (distinct s3_e19 s5_e24) (distinct s3_e19 s6_e2) (distinct s3_e19 s6_e18) (distinct s3_e19 s6_e26) (distinct s3_e19 s7_e2) (distinct s3_e19 s8_e2) (distinct s3_e19 s8_e11) (distinct s3_e19 s9_e2) (distinct s3_e19 s9_e9) (distinct s3_e19 s9_e19) (distinct s3_e27 s4_e2) (distinct s3_e27 s4_e14) (distinct s3_e27 s5_e2) (distinct s3_e27 s5_e13) (distinct s3_e27 s5_e16) (distinct s3_e27 s5_e18) (distinct s3_e27 s5_e24) (distinct s3_e27 s6_e2) (distinct s3_e27 s6_e18) (distinct s3_e27 s6_e26) (distinct s3_e27 s7_e2) (distinct s3_e27 s8_e2) (distinct s3_e27 s8_e11) (distinct s3_e27 s9_e2) (distinct s3_e27 s9_e9) (distinct s3_e27 s9_e19) (distinct s4_e2 s4_e14) (distinct s4_e2 s5_e2) (distinct s4_e2 s5_e13) (distinct s4_e2 s5_e16) (distinct s4_e2 s5_e18) (distinct s4_e2 s5_e24) (distinct s4_e2 s6_e2) (distinct s4_e2 s6_e18) (distinct s4_e2 s6_e26) (distinct s4_e2 s7_e2) (distinct s4_e2 s8_e2) (distinct s4_e2 s8_e11) (distinct s4_e2 s9_e2) (distinct s4_e2 s9_e9) (distinct s4_e2 s9_e19) (distinct s4_e14 s5_e2) (distinct s4_e14 s5_e13) (distinct s4_e14 s5_e16) (distinct s4_e14 s5_e18) (distinct s4_e14 s5_e24) (distinct s4_e14 s6_e2) (distinct s4_e14 s6_e18) (distinct s4_e14 s6_e26) (distinct s4_e14 s7_e2) (distinct s4_e14 s8_e2) (distinct s4_e14 s8_e11) (distinct s4_e14 s9_e2) (distinct s4_e14 s9_e9) (distinct s4_e14 s9_e19) (distinct s5_e2 s5_e13) (distinct s5_e2 s5_e16) (distinct s5_e2 s5_e18) (distinct s5_e2 s5_e24) (distinct s5_e2 s6_e2) (distinct s5_e2 s6_e18) (distinct s5_e2 s6_e26) (distinct s5_e2 s7_e2) (distinct s5_e2 s8_e2) (distinct s5_e2 s8_e11) (distinct s5_e2 s9_e2) (distinct s5_e2 s9_e9) (distinct s5_e2 s9_e19) (distinct s5_e13 s5_e16) (distinct s5_e13 s5_e18) (distinct s5_e13 s5_e24) (distinct s5_e13 s6_e2) (distinct s5_e13 s6_e18) (distinct s5_e13 s6_e26) (distinct s5_e13 s7_e2) (distinct s5_e13 s8_e2) (distinct s5_e13 s8_e11) (distinct s5_e13 s9_e2) (distinct s5_e13 s9_e9) (distinct s5_e13 s9_e19) (distinct s5_e16 s5_e18) (distinct s5_e16 s5_e24) (distinct s5_e16 s6_e2) (distinct s5_e16 s6_e18) (distinct s5_e16 s6_e26) (distinct s5_e16 s7_e2) (distinct s5_e16 s8_e2) (distinct s5_e16 s8_e11) (distinct s5_e16 s9_e2) (distinct s5_e16 s9_e9) (distinct s5_e16 s9_e19) (distinct s5_e18 s5_e24) (distinct s5_e18 s6_e2) (distinct s5_e18 s6_e18) (distinct s5_e18 s6_e26) (distinct s5_e18 s7_e2) (distinct s5_e18 s8_e2) (distinct s5_e18 s8_e11) (distinct s5_e18 s9_e2) (distinct s5_e18 s9_e9) (distinct s5_e18 s9_e19) (distinct s5_e24 s6_e2) (distinct s5_e24 s6_e18) (distinct s5_e24 s6_e26) (distinct s5_e24 s7_e2) (distinct s5_e24 s8_e2) (distinct s5_e24 s8_e11) (distinct s5_e24 s9_e2) (distinct s5_e24 s9_e9) (distinct s5_e24 s9_e19) (distinct s6_e2 s6_e18) (distinct s6_e2 s6_e26) (distinct s6_e2 s7_e2) (distinct s6_e2 s8_e2) (distinct s6_e2 s8_e11) (distinct s6_e2 s9_e2) (distinct s6_e2 s9_e9) (distinct s6_e2 s9_e19) (distinct s6_e18 s6_e26) (distinct s6_e18 s7_e2) (distinct s6_e18 s8_e2) (distinct s6_e18 s8_e11) (distinct s6_e18 s9_e2) (distinct s6_e18 s9_e9) (distinct s6_e18 s9_e19) (distinct s6_e26 s7_e2) (distinct s6_e26 s8_e2) (distinct s6_e26 s8_e11) (distinct s6_e26 s9_e2) (distinct s6_e26 s9_e9) (distinct s6_e26 s9_e19) (distinct s7_e2 s8_e2) (distinct s7_e2 s8_e11) (distinct s7_e2 s9_e2) (distinct s7_e2 s9_e9) (distinct s7_e2 s9_e19) (distinct s8_e2 s8_e11) (distinct s8_e2 s9_e2) (distinct s8_e2 s9_e9) (distinct s8_e2 s9_e19) (distinct s8_e11 s9_e2) (distinct s8_e11 s9_e9) (distinct s8_e11 s9_e19) (distinct s9_e2 s9_e9) (distinct s9_e2 s9_e19) (distinct s9_e9 s9_e19)))

(check-sat)
(get-model)